import 'package:flutter/material.dart';
import '../l10n/app_localizations.dart';

/// –¢–∏–ø—ã –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
enum AlcoholType {
  beer('beer', Icons.sports_bar, 5.0),
  wine('wine', Icons.wine_bar, 12.0),
  spirits('spirits', Icons.local_bar, 40.0),
  cocktail('cocktail', Icons.local_drink, 15.0);

  final String key; // –ö–ª—é—á –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
  final IconData icon;
  final double defaultAbv;

  const AlcoholType(this.key, this.icon, this.defaultAbv);

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
  String getLabel(BuildContext context) {
    final l10n = AppLocalizations.of(context);
    switch (this) {
      case AlcoholType.beer:
        return l10n.beer;
      case AlcoholType.wine:
        return l10n.wine;
      case AlcoholType.spirits:
        return l10n.spirits;
      case AlcoholType.cocktail:
        return l10n.cocktail;
    }
  }
}

/// –ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∞–ª–∫–æ–≥–æ–ª—è
class AlcoholIntake {
  final String id;
  final DateTime timestamp;
  final AlcoholType type;
  final double volumeMl;
  final double abv; // Alcohol by Volume (%)
  final double standardDrinks;
  final double? sugar; // –î–æ–±–∞–≤–ª–µ–Ω–æ: —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ –≤ –≥—Ä–∞–º–º–∞—Ö
  final String? name; // –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞
  final String? emoji; // –≠–º–æ–¥–∑–∏ –Ω–∞–ø–∏—Ç–∫–∞

  AlcoholIntake({
    String? id,
    required this.timestamp,
    required this.type,
    required this.volumeMl,
    required this.abv,
    this.sugar, // –î–æ–±–∞–≤–ª–µ–Ω–æ: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–∞—Ö–∞—Ä–∞
    this.name,
    this.emoji,
  }) : id = id ?? DateTime.now().millisecondsSinceEpoch.toString(),
       standardDrinks = _calculateStandardDrinks(volumeMl, abv);

  static double _calculateStandardDrinks(double volumeMl, double abv) {
    const double standardDrinkGrams = 10.0;
    const double alcoholDensity = 0.789;

    double pureAlcoholMl = volumeMl * (abv / 100);
    double pureAlcoholGrams = pureAlcoholMl * alcoholDensity;
    return pureAlcoholGrams / standardDrinkGrams;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å–∞—Ö–∞—Ä–∞ (—Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)
  double getSugarContent() {
    if (sugar != null) return sugar!;

    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∞—Ö–∞—Ä–∞ –ø–æ —Ç–∏–ø–∞–º –Ω–∞–ø–∏—Ç–∫–æ–≤ (–≥ –Ω–∞ 100 –º–ª)
    switch (type) {
      case AlcoholType.beer:
        return (volumeMl / 100) * 3.0; // ~3–≥ –Ω–∞ 100–º–ª
      case AlcoholType.wine:
        return (volumeMl / 100) * 2.0; // ~2–≥ –Ω–∞ 100–º–ª
      case AlcoholType.spirits:
        return 0; // –ö—Ä–µ–ø–∫–∏–π –∞–ª–∫–æ–≥–æ–ª—å –æ–±—ã—á–Ω–æ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞
      case AlcoholType.cocktail:
        return (volumeMl / 100) *
            12.0; // ~12–≥ –Ω–∞ 100–º–ª (–º–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞ –≤ –∫–æ–∫—Ç–µ–π–ª—è—Ö)
    }
  }

  double getWaterCorrection() {
    const double waterBonusPerSD = 150.0;
    return standardDrinks * waterBonusPerSD;
  }

  double getSodiumCorrection() {
    const double sodiumPerSD = 200.0;
    return standardDrinks * sodiumPerSD;
  }

  double getHRIModifier() {
    const double hriPerSD = 3.0;
    const double hriCap = 15.0;
    return (standardDrinks * hriPerSD).clamp(0, hriCap);
  }

  Map<String, dynamic> toJson() => {
    'id': id,
    'timestamp': timestamp.toIso8601String(),
    'type': type.index,
    'volumeMl': volumeMl,
    'abv': abv,
    'standardDrinks': standardDrinks,
    'sugar': sugar, // –î–æ–±–∞–≤–ª–µ–Ω–æ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞
    if (name != null) 'name': name,
    if (emoji != null) 'emoji': emoji,
  };

  factory AlcoholIntake.fromJson(Map<String, dynamic> json) {
    return AlcoholIntake(
      id: json['id'],
      timestamp: DateTime.parse(json['timestamp']),
      type: AlcoholType.values[json['type']],
      volumeMl: json['volumeMl'].toDouble(),
      abv: json['abv'].toDouble(),
      sugar: json['sugar']?.toDouble(), // –î–æ–±–∞–≤–ª–µ–Ω–æ: —á—Ç–µ–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞
      name: json['name'] as String?,
      emoji: json['emoji'] as String?,
    );
  }

  String get formattedTime {
    final hour = timestamp.hour.toString().padLeft(2, '0');
    final minute = timestamp.minute.toString().padLeft(2, '0');
    return '$hour:$minute';
  }

  String get formattedSD {
    if (standardDrinks < 1) {
      return '${standardDrinks.toStringAsFixed(1)} SD';
    }
    return '${standardDrinks.toStringAsFixed(1)} SD';
  }
}

/// –£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω
class AlcoholCheckin {
  final DateTime date;
  final int feelingScore; // 1-5
  final bool hadWater;
  final bool hadElectrolytes;

  AlcoholCheckin({
    required this.date,
    required this.feelingScore,
    this.hadWater = false,
    this.hadElectrolytes = false,
  });

  List<String> getRecommendations(BuildContext context) {
    final l10n = AppLocalizations.of(context);
    List<String> recommendations = [];

    if (feelingScore <= 2) {
      recommendations.add('üíß ${l10n.drinkMoreWaterToday}');
      recommendations.add('üßÇ ${l10n.addElectrolytesToWater}');
      recommendations.add('‚òï ${l10n.limitCoffeeOneCup}');
    } else if (feelingScore <= 3) {
      recommendations.add('üíß ${l10n.increaseWater10}');
      recommendations.add('üßÇ ${l10n.dontForgetElectrolytes}');
    }

    if (!hadWater) {
      recommendations.add('üíß ${l10n.startDayWithWater}');
    }

    if (!hadElectrolytes) {
      recommendations.add('üßÇ ${l10n.takeElectrolytesMorning}');
    }

    return recommendations;
  }

  Map<String, dynamic> toJson() => {
    'date': date.toIso8601String(),
    'feelingScore': feelingScore,
    'hadWater': hadWater,
    'hadElectrolytes': hadElectrolytes,
  };

  factory AlcoholCheckin.fromJson(Map<String, dynamic> json) {
    return AlcoholCheckin(
      date: DateTime.parse(json['date']),
      feelingScore: json['feelingScore'],
      hadWater: json['hadWater'] ?? false,
      hadElectrolytes: json['hadElectrolytes'] ?? false,
    );
  }
}
