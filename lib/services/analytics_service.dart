// lib/services/analytics_service.dart

import 'package:firebase_analytics/firebase_analytics.dart';
import 'package:flutter/foundation.dart';
import 'package:hydracoach/utils/app_logger.dart';

import 'devtodev_analytics_service.dart';
import 'appsflyer_service.dart';
import 'purchase_connector_service.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π (Firebase + DevToDev).
/// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
class AnalyticsService {
  static final AnalyticsService _instance = AnalyticsService._internal();
  factory AnalyticsService() => _instance;
  AnalyticsService._internal();

  final FirebaseAnalytics _firebase = FirebaseAnalytics.instance;
  final DevToDevAnalyticsService _devToDev = DevToDevAnalyticsService();
  final AppsFlyerService _appsFlyer = AppsFlyerService();

  late final List<_AnalyticsBackend> _backends = <_AnalyticsBackend>[
    _FirebaseAnalyticsBackend(_firebase),
    _DevToDevAnalyticsBackend(_devToDev),
    _AppsFlyerAnalyticsBackend(_appsFlyer),
  ];

  bool _isInitialized = false;

  Future<void> init() async {
    if (_isInitialized) return;

    for (final backend in _backends) {
      try {
        await backend.initialize();
      } catch (e) {
        logger.e('Error initializing analytics backend: $e');
      }
    }

    _isInitialized = true;

    // –õ–æ–≥–∏—Ä—É–µ–º AppsFlyer UID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (kDebugMode) {
      await _logDebugIds();
    }
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ AppsFlyer
  Future<void> _logDebugIds() async {
    try {
      final appsFlyerUID = await _appsFlyer.getAppsFlyerUID();
      if (appsFlyerUID != null) {
        logger.d('üì± AppsFlyer UID: $appsFlyerUID');
        logger.d('üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –≤ SDK Integration Test:');
        logger.d(
          '   https://dev.appsflyer.com/hc/docs/testing-flutter#sdk-integration-test',
        );
      }

      // –î–ª—è Android —Ç–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å Advertising ID
      if (defaultTargetPlatform == TargetPlatform.android) {
        logger.d('üí° –î–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ Raw Data Export:');
        logger.d('   1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Android ‚Üí Google ‚Üí –†–µ–∫–ª–∞–º–∞');
        logger.d('   2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Advertising ID (GAID)');
        logger.d('   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ Raw Data Export');
      }
    } catch (e) {
      logger.d('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è debug IDs: $e');
    }
  }

  Future<void> checkAndEnableAppsFlyer() async {
    if (kDebugMode) {
      logger.d('üîß –ù–ê–ß–ò–ù–ê–ï–ú checkAndEnableAppsFlyer()...');
    }

    try {
      // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –¥–ª—è Purchase Connector:
      // 1. initialize() - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç SDK —Å manualStart: true (–ù–ï –∑–∞–ø—É—Å–∫–∞–µ—Ç!)
      if (kDebugMode) {
        logger.d('üîß –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AppsFlyer SDK...');
      }
      await _appsFlyer.initialize();
      if (kDebugMode) {
        logger.d(
          '‚úÖ AppsFlyer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–æ –ù–ï –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ manualStart: true)',
        );
      }

      // 2. startSDK() - –∑–∞–ø—É—Å–∫–∞–µ—Ç SDK –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (kDebugMode) {
        logger.d('üîß –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ AppsFlyer SDK...');
      }
      await _appsFlyer.startSDK();
      if (kDebugMode) {
        logger.d('üöÄ AppsFlyer SDK –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        logger.d(
          '‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –¥–ª—è Purchase Connector –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
        );
      }

      // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Purchase Connector –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ af_ars_ —Å–æ–±—ã—Ç–∏–π
      if (kDebugMode) {
        logger.d('üîß –®–∞–≥ 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Purchase Connector...');
      }

      // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ SDK (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è AppsFlyer)
      await Future.delayed(const Duration(seconds: 1));

      final purchaseConnector = PurchaseConnectorService();
      await purchaseConnector.initializeAndStart();

      if (kDebugMode) {
        logger.d(
          'üéØ Purchase Connector –∑–∞–ø—É—â–µ–Ω - —Å–æ–±—ã—Ç–∏—è af_ars_ –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
        );
      }
    } catch (e, stackTrace) {
      if (kDebugMode) {
        logger.d('‚ùå Error enabling AppsFlyer: $e');
        logger.d('‚ùå StackTrace: $stackTrace');
      }
    }

    if (kDebugMode) {
      logger.d('üîß –ó–ê–í–ï–†–®–ò–õ–ò checkAndEnableAppsFlyer()');
    }
  }

  Future<void> _setUserId(String? userId) async {
    await _broadcast((backend) => backend.setUserId(userId));
  }

  Future<void> _setUserProperty(String name, String value) async {
    await _broadcast((backend) => backend.setUserProperty(name, value));
  }

  Future<void> _logScreenViewInternal({
    required String screenName,
    String? screenClass,
  }) async {
    final resolvedScreenClass = screenClass ?? screenName;

    await _broadcast(
      (backend) => backend.logScreenView(
        screenName: screenName,
        screenClass: resolvedScreenClass,
      ),
    );
  }

  Future<void> _logEventInternal({
    required String name,
    Map<String, dynamic>? parameters,
  }) async {
    await _broadcast(
      (backend) => backend.logEvent(name: name, parameters: parameters),
    );
  }

  Future<void> _broadcast(
    Future<void> Function(_AnalyticsBackend backend) action,
  ) async {
    await Future.wait(_backends.map(action));
  }

  /// –ü–æ–ª—É—á–∏—Ç—å observer –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
  FirebaseAnalyticsObserver get observer =>
      FirebaseAnalyticsObserver(analytics: _firebase);

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    if (_isInitialized) {
      return;
    }
    _isInitialized = true;

    for (final backend in _backends) {
      await backend.initialize();
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await setDefaultUserProperties();

    if (kDebugMode) {
      logger.d('üìä Analytics Service initialized');
    }
  }

  // AppsFlyer methods removed - SDK not currently integrated
  // These methods can be restored when AppsFlyer SDK is added back

  /// Set default user properties
  Future<void> setDefaultUserProperties() async {
    // –≠—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ–º–æ–≥—É—Ç —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await _setUserId(null); // –ü–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
  }

  // ==================== UNIFIED LOGGING ====================

  /// Main unified logging method - sends to Firebase Analytics
  Future<void> log(String eventName, [Map<String, dynamic>? parameters]) async {
    // Send to Firebase Analytics
    await logEvent(name: eventName, parameters: parameters);
  }

  // ==================== USER PROPERTIES ====================

  /// Set diet mode
  Future<void> setDietMode(String mode) async {
    await _setUserProperty('diet_mode', mode);
  }

  /// Set subscription status
  Future<void> setProStatus(bool isPro) async {
    await _setUserProperty('is_pro', isPro.toString());
  }

  /// Set notification status
  Future<void> setNotificationStatus(bool enabled) async {
    await _setUserProperty('notifications_enabled', enabled.toString());
  }

  /// Set user country
  Future<void> setUserCountry(String countryCode) async {
    await _setUserProperty('country', countryCode);
  }

  // ==================== SCREEN VIEW EVENTS ====================

  /// Universal method for logging screen views
  Future<void> logScreenView({
    required String screenName,
    String? screenClass,
  }) async {
    await _logScreenViewInternal(
      screenName: screenName,
      screenClass: screenClass,
    );

    if (kDebugMode) {
      logger.d('üìä Screen view: $screenName');
    }
  }

  /// General method for logging events (Firebase only)
  Future<void> logEvent({
    required String name,
    Map<String, dynamic>? parameters,
  }) async {
    await _logEventInternal(name: name, parameters: parameters);

    if (kDebugMode) {
      logger.d('üìä Firebase Event: $name');
      if (parameters != null) {
        logger.d('   Parameters: $parameters');
      }
    }
  }

  // ==================== SUBSCRIPTION EVENTS ====================

  /// Log subscription purchase - CRITICAL FOR APPSFLYER LIVE EVENTS
  Future<void> logSubscriptionPurchased({
    required String productId,
    required double price,
    required String currency,
    required String transactionId,
  }) async {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
    final eventName = productId.contains('trial')
        ? 'af_start_trial'
        : 'af_subscribe';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ AppsFlyer SDK –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Live Events
    await _appsFlyer.logEvent(
      eventName: eventName,
      eventValues: {
        'af_revenue': price,
        'af_currency': currency,
        'af_quantity': 1,
        'af_content_id': productId,
        'af_order_id': transactionId,
        'af_validation_method': 'purchase_connector',
      },
    );

    // –¢–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ Firebase –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    await logEvent(
      name: eventName,
      parameters: {
        'product_id': productId,
        'price': price,
        'currency': currency,
        'transaction_id': transactionId,
      },
    );

    if (kDebugMode) {
      logger.d('üí∞ Subscription purchased: $productId');
      logger.d('   Event: $eventName');
      logger.d('   Price: $price $currency');
      logger.d('   Transaction: $transactionId');
    }
  }

  // ==================== NOTIFICATION EVENTS ====================

  /// Notification scheduled
  Future<void> logNotificationScheduled({
    required String type,
    required DateTime scheduledTime,
    int? delayMinutes,
  }) async {
    await logEvent(
      name: 'notification_scheduled',
      parameters: {
        'notification_type': type,
        'scheduled_hour': scheduledTime.hour,
        'delay_minutes': delayMinutes ?? 0,
        'day_of_week': scheduledTime.weekday,
      },
    );

    if (kDebugMode) {
      logger.d(
        'üìä Event: notification_scheduled - $type at ${scheduledTime.hour}:${scheduledTime.minute}',
      );
    }
  }

  /// Notification sent
  Future<void> logNotificationSent({
    required String type,
    bool isScheduled = false,
  }) async {
    await logEvent(
      name: 'notification_sent',
      parameters: {
        'notification_type': type,
        'is_scheduled': isScheduled,
        'hour': DateTime.now().hour,
      },
    );

    if (kDebugMode) {
      logger.d('üìä Event: notification_sent - $type');
    }
  }

  /// Notification opened
  Future<void> logNotificationOpened({
    required String type,
    String? action,
  }) async {
    await logEvent(
      name: 'notification_opened',
      parameters: {'notification_type': type, 'action': action ?? 'none'},
    );
  }

  /// Notification error
  Future<void> logNotificationError({
    required String type,
    required String error,
  }) async {
    await logEvent(
      name: 'notification_error',
      parameters: {
        'notification_type': type,
        'error_message': error.substring(0, 100), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
      },
    );
  }

  /// Duplicate notification detected
  Future<void> logNotificationDuplicate({
    required String type,
    required int count,
  }) async {
    await logEvent(
      name: 'notification_duplicate',
      parameters: {'notification_type': type, 'duplicate_count': count},
    );

    if (kDebugMode) {
      logger.d('‚ö†Ô∏è Duplicate notification detected: $type x$count');
    }
  }

  // ==================== CORE TRACKING EVENTS ====================

  /// Log water intake - IMPORTANT EVENT FOR APPSFLYER
  Future<void> logWaterIntake({
    required int amount,
    required String source,
  }) async {
    await logEvent(
      name: 'water_logged',
      parameters: {
        'amount_ml': amount,
        'source': source, // 'quick', 'manual', 'preset'
        'hour': DateTime.now().hour,
      },
    );
  }

  /// Log electrolyte intake
  Future<void> logElectrolyteIntake({
    required String type,
    required int amount,
  }) async {
    await logEvent(
      name: 'electrolyte_logged',
      parameters: {
        'type': type, // 'sodium', 'potassium', 'magnesium'
        'amount_mg': amount,
      },
    );
  }

  /// Log coffee intake
  Future<void> logCoffeeIntake({required int cups}) async {
    await logEvent(
      name: 'coffee_logged',
      parameters: {'cups': cups, 'hour': DateTime.now().hour},
    );
  }

  /// Log alcohol intake
  Future<void> logAlcoholIntake({
    required double standardDrinks,
    required String type,
  }) async {
    await logEvent(
      name: 'alcohol_logged',
      parameters: {
        'standard_drinks': standardDrinks,
        'type': type, // 'beer', 'wine', 'spirits', 'cocktail'
        'hour': DateTime.now().hour,
      },
    );
  }

  // ==================== GOAL & PROGRESS EVENTS ====================

  /// Goal reached - IMPORTANT EVENT FOR APPSFLYER
  Future<void> logGoalReached({
    required String goalType,
    required double percentage,
  }) async {
    await logEvent(
      name: 'daily_goal_reached',
      parameters: {
        'goal_type': goalType, // 'water', 'sodium', 'potassium', 'magnesium'
        'percentage': percentage.round(),
      },
    );
  }

  /// Water goal milestone events - –í–ê–ñ–ù–´–ï –°–û–ë–´–¢–ò–Ø –î–õ–Ø –ö–û–ì–û–†–¢–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê
  /// –û—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –û–î–ò–ù –†–ê–ó –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ milestone
  Future<void> logWaterGoalMilestone({required int totalDays}) async {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
    String eventName;
    switch (totalDays) {
      case 1:
        eventName = 'water_goal_100_first'; // –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –¥–æ—Å—Ç–∏–≥ 100%
        break;
      case 2:
        eventName = 'water_goal_100_2days'; // 2 –¥–Ω—è —Å 100%
        break;
      case 3:
        eventName = 'water_goal_100_3days'; // 3 –¥–Ω—è —Å 100%
        break;
      case 5:
        eventName = 'water_goal_100_5days'; // 5 –¥–Ω–µ–π —Å 100%
        break;
      case 7:
        eventName = 'water_goal_100_7days'; // 7 –¥–Ω–µ–π —Å 100%
        break;
      case 10:
        eventName = 'water_goal_100_10days'; // 10 –¥–Ω–µ–π —Å 100%
        break;
      case 14:
        eventName = 'water_goal_100_14days'; // 14 –¥–Ω–µ–π —Å 100%
        break;
      default:
        return; // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    }

    await logEvent(
      name: eventName,
      parameters: {'total_days_with_100_percent': totalDays},
    );
  }

  /// HRI status change
  Future<void> logHRIStatusChange({
    required int fromValue,
    required int toValue,
    required String status,
  }) async {
    await logEvent(
      name: 'hri_status_changed',
      parameters: {
        'from_value': fromValue,
        'to_value': toValue,
        'status': status, // 'green', 'yellow', 'red'
        'direction': toValue > fromValue ? 'worse' : 'better',
      },
    );
  }

  /// Hydration status
  Future<void> logHydrationStatus({required String status}) async {
    await logEvent(
      name: 'hydration_status',
      parameters: {
        'status': status, // 'normal', 'dehydrated', 'diluted', 'low_salt'
        'hour': DateTime.now().hour,
      },
    );
  }

  // ==================== SUBSCRIPTION EVENTS - CRITICAL FOR APPSFLYER ROI360 ====================

  /// Paywall shown
  Future<void> logPaywallShown({
    required String source,
    String? variant,
  }) async {
    await logEvent(
      name: 'paywall_shown',
      parameters: {
        'source': source, // 'onboarding', 'settings', 'feature_gate'
        'variant': variant ?? 'default',
      },
    );
  }

  /// –í—ã–±–æ—Ä –ø–ª–∞–Ω–∞ –Ω–∞ paywall
  Future<void> logPaywallPlanSelected({
    required String plan,
    required String source,
    String? variant,
  }) async {
    await logEvent(
      name: 'paywall_plan_selected',
      parameters: {
        'plan': plan,
        'source': source,
        'variant': variant ?? 'default',
      },
    );
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–∏–∞–ª–∞ –Ω–∞ paywall
  Future<void> logPaywallTrialToggle({
    required String source,
    required bool enabled,
  }) async {
    await logEvent(
      name: 'paywall_trial_toggled',
      parameters: {'source': source, 'enabled': enabled ? 'true' : 'false'},
    );
  }

  /// Log –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª free trial
  Future<void> logTrialStarted({
    required String product,
    required int trialDuration,
  }) async {
    await logEvent(
      name: 'trial_started',
      parameters: {
        'product': product,
        'trial_duration_days': trialDuration,
        'source': 'app',
      },
    );
  }

  /// –ó–∞–∫—Ä—ã—Ç–∏–µ paywall
  Future<void> logPaywallDismissed({
    required String source,
    String? reason,
  }) async {
    await logEvent(
      name: 'paywall_dismissed',
      parameters: {'source': source, if (reason != null) 'reason': reason},
    );
  }

  /// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> logSubscriptionPurchaseAttempt({
    required String product,
    required String source,
    bool trialEnabled = false,
  }) async {
    await logEvent(
      name: 'subscription_purchase_attempt',
      parameters: {
        'product': product,
        'source': source,
        'trial_enabled': trialEnabled ? 'true' : 'false',
      },
    );
  }

  /// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> logSubscriptionPurchaseResult({
    required String product,
    required String source,
    required bool success,
    bool trialEnabled = false,
    String? error,
  }) async {
    await logEvent(
      name: 'subscription_purchase_result',
      parameters: {
        'product': product,
        'source': source,
        'success': success ? 'true' : 'false',
        'trial_enabled': trialEnabled ? 'true' : 'false',
        if (error != null && error.isNotEmpty) 'error': error.substring(0, 80),
      },
    );
  }

  /// –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> logSubscriptionRestoreAttempt({required String source}) async {
    await logEvent(
      name: 'subscription_restore_attempt',
      parameters: {'source': source},
    );
  }

  /// –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> logSubscriptionRestoreResult({
    required String source,
    required bool success,
  }) async {
    await logEvent(
      name: 'subscription_restore_result',
      parameters: {'source': source, 'success': success ? 'true' : 'false'},
    );
  }

  /// PRO —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
  Future<void> logProFeatureGate({required String feature}) async {
    await logEvent(
      name: 'pro_feature_gate_hit',
      parameters: {
        'feature': feature, // 'smart_reminders', 'csv_export', etc
      },
    );
  }

  // ==================== ENGAGEMENT EVENTS ====================

  /// Report viewed
  Future<void> logReportViewed({required String type}) async {
    await logEvent(
      name: 'report_viewed',
      parameters: {
        'type': type, // 'daily', 'weekly'
      },
    );
  }

  /// CSV exported
  Future<void> logCSVExported() async {
    await logEvent(
      name: 'csv_exported',
      parameters: {'date': DateTime.now().toIso8601String().split('T')[0]},
    );
  }

  /// Settings changed
  Future<void> logSettingsChanged({
    required String setting,
    required dynamic value,
  }) async {
    await logEvent(
      name: 'settings_changed',
      parameters: {'setting': setting, 'value': value.toString()},
    );
  }

  /// Diet mode changed
  Future<void> logDietModeChanged({
    required String from,
    required String to,
  }) async {
    await logEvent(
      name: 'diet_mode_changed',
      parameters: {'from': from, 'to': to},
    );

    // Also update user property
    await setDietMode(to);
  }

  // ==================== ONBOARDING EVENTS ====================

  /// Onboarding start
  Future<void> logOnboardingStart() async {
    await logEvent(name: 'onboarding_start');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –≤ DevToDev
    // -1 –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞/–æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    await _devToDev.tutorial(-1);
  }

  /// –ü—Ä–æ—Å–º–æ—Ç—Ä —à–∞–≥–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  Future<void> logOnboardingStepViewed({
    required String stepId,
    required int stepIndex,
    String? screenName,
  }) async {
    await logEvent(
      name: 'onboarding_step_viewed',
      parameters: {
        'step_id': stepId,
        'step_index': stepIndex,
        if (screenName != null) 'screen_name': screenName,
      },
    );

    await logScreenView(
      screenName: screenName ?? stepId,
      screenClass: 'Onboarding$stepId',
    );
  }

  /// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —à–∞–≥–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  Future<void> logOnboardingStepCompleted({
    required String stepId,
    required int stepIndex,
  }) async {
    await logEvent(
      name: 'onboarding_step_completed',
      parameters: {'step_id': stepId, 'step_index': stepIndex},
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –≤ DevToDev
    // –ó–Ω–∞—á–µ–Ω–∏—è 1..n –æ–∑–Ω–∞—á–∞—é—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
    // stepIndex 0 = welcome (–Ω–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —à–∞–≥ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞)
    // stepIndex 1+ = —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (stepIndex > 0) {
      await _devToDev.tutorial(stepIndex);
    }
  }

  /// –í—ã–±–æ—Ä –æ–ø—Ü–∏–∏ –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ
  Future<void> logOnboardingOptionSelected({
    required String stepId,
    required String option,
    required String value,
  }) async {
    await logEvent(
      name: 'onboarding_option_selected',
      parameters: {'step_id': stepId, 'option': option, 'value': value},
    );
  }

  /// Onboarding complete
  Future<void> logOnboardingComplete() async {
    await logEvent(name: 'onboarding_complete');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –≤ DevToDev
    // -2 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Ç—É—Ç–æ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
    await _devToDev.tutorial(-2);
  }

  /// Onboarding skip
  Future<void> logOnboardingSkip({required int step}) async {
    await logEvent(name: 'onboarding_skip', parameters: {'step': step});
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —à–∞–≥–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  Future<void> logOnboardingProfileSaved({
    required double weightKg,
    required String units,
    required String dietMode,
    required bool fastingEnabled,
  }) async {
    await logEvent(
      name: 'onboarding_profile_saved',
      parameters: {
        'weight_kg': weightKg,
        'units': units,
        'diet_mode': dietMode,
        'fasting_enabled': fastingEnabled,
      },
    );
  }

  /// –ü–æ–∫–∞–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  Future<void> logPermissionPrompt({
    required String permission,
    required String context,
  }) async {
    await logEvent(
      name: 'permission_prompt',
      parameters: {'permission': permission, 'context': context},
    );
  }

  /// –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  Future<void> logPermissionResult({
    required String permission,
    required String status,
    required String context,
  }) async {
    await logEvent(
      name: 'permission_result',
      parameters: {
        'permission': permission,
        'status': status,
        'context': context,
      },
    );
  }

  // ==================== TUTORIAL EVENTS ====================

  /// –ü–æ–∫–∞–∑ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –ø–µ—Ä–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã
  Future<void> logFirstIntakeTutorialShown() async {
    await logEvent(name: 'first_intake_tutorial_shown');
  }

  /// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –ø–µ—Ä–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã
  Future<void> logFirstIntakeTutorialCompleted() async {
    await logEvent(name: 'first_intake_tutorial_completed');
  }

  // ==================== APP LIFECYCLE ====================

  /// App opened
  Future<void> logAppOpen() async {
    await logEvent(name: 'app_open');
  }

  /// Session
  Future<void> logSession({required int durationSeconds}) async {
    await logEvent(
      name: 'session',
      parameters: {'duration_seconds': durationSeconds},
    );
  }

  /// –í—ã–±–æ—Ä –≤–∫–ª–∞–¥–∫–∏ –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  Future<void> logNavigationTabSelected({required String tab}) async {
    await logEvent(name: 'navigation_tab_selected', parameters: {'tab': tab});
  }

  /// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–æ–≤
  Future<void> logQuickAddMenuOpened() async {
    await logEvent(name: 'quick_add_menu_opened');
  }

  // ==================== DEBUG HELPERS ====================

  /// Test event for verification
  Future<void> logTestEvent() async {
    await logEvent(
      name: 'test_event',
      parameters: {
        'timestamp': DateTime.now().toIso8601String(),
        'debug': kDebugMode,
      },
    );

    if (kDebugMode) {
      logger.d('üìä Test event sent to Analytics');
    }
  }

  /// Enable/disable analytics collection
  Future<void> setAnalyticsCollectionEnabled(bool enabled) async {
    await _broadcast(
      (backend) => backend.setAnalyticsCollectionEnabled(enabled),
    );
  }

  // ==================== ACHIEVEMENT EVENTS ====================

  /// Achievement unlocked
  Future<void> logAchievementUnlocked({
    required String achievementId,
    required String achievementName,
    required String category,
    required int rewardPoints,
  }) async {
    await logEvent(
      name: 'achievement_unlocked',
      parameters: {
        'achievement_id': achievementId,
        'achievement_name': achievementName,
        'category': category,
        'reward_points': rewardPoints,
      },
    );

    if (kDebugMode) {
      logger.d('üìä Achievement unlocked: $achievementName');
    }
  }

  /// Achievements screen view
  Future<void> logAchievementsScreenView() async {
    await _logScreenViewInternal(
      screenName: 'achievements',
      screenClass: 'AchievementsScreen',
    );

    if (kDebugMode) {
      logger.d('üìä Achievements screen viewed');
    }
  }

  /// Achievement viewed (simplified version for achievements_screen.dart)
  Future<void> logAchievementViewed({
    required String achievementId,
    required String achievementName,
    required String category,
    required bool isUnlocked,
  }) async {
    await logEvent(
      name: 'achievement_details_viewed',
      parameters: {
        'achievement_id': achievementId,
        'achievement_name': achievementName,
        'category': category,
        'is_unlocked': isUnlocked,
      },
    );

    if (kDebugMode) {
      logger.d('üìä Achievement viewed: $achievementName');
    }
  }

  /// Achievement details viewed (full version)
  Future<void> logAchievementDetailsViewed({
    required String achievementId,
    required String achievementName,
    required bool isUnlocked,
  }) async {
    await logEvent(
      name: 'achievement_details_viewed',
      parameters: {
        'achievement_id': achievementId,
        'achievement_name': achievementName,
        'is_unlocked': isUnlocked,
      },
    );
  }
}

abstract class _AnalyticsBackend {
  Future<void> initialize();

  Future<void> setUserId(String? userId);

  Future<void> setUserProperty(String name, String value);

  Future<void> logScreenView({
    required String screenName,
    required String screenClass,
  });

  Future<void> logEvent({
    required String name,
    Map<String, dynamic>? parameters,
  });

  Future<void> setAnalyticsCollectionEnabled(bool enabled);
}

class _FirebaseAnalyticsBackend implements _AnalyticsBackend {
  _FirebaseAnalyticsBackend(this._analytics);

  final FirebaseAnalytics _analytics;

  @override
  Future<void> initialize() async {
    // Firebase –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å
  }

  @override
  Future<void> setUserId(String? userId) async {
    try {
      await _analytics.setUserId(id: userId);
    } catch (error) {
      if (kDebugMode) {
        logger.d('‚ùå Error setting Firebase userId: $error');
      }
    }
  }

  @override
  Future<void> setUserProperty(String name, String value) async {
    try {
      await _analytics.setUserProperty(name: name, value: value);
    } catch (error) {
      if (kDebugMode) {
        logger.d('‚ùå Error setting Firebase user property $name: $error');
      }
    }
  }

  @override
  Future<void> logScreenView({
    required String screenName,
    required String screenClass,
  }) async {
    try {
      await _analytics.logScreenView(
        screenName: screenName,
        screenClass: screenClass,
      );
    } catch (error) {
      if (kDebugMode) {
        logger.d('‚ùå Error logging Firebase screen: $screenName ($error)');
      }
    }
  }

  @override
  Future<void> logEvent({
    required String name,
    Map<String, dynamic>? parameters,
  }) async {
    final Map<String, Object>? firebaseParams = parameters?.map(
      (key, value) => MapEntry(key, value as Object),
    );

    try {
      await _analytics.logEvent(name: name, parameters: firebaseParams);
    } catch (error) {
      if (kDebugMode) {
        logger.d('‚ùå Error logging Firebase event $name: $error');
      }
    }
  }

  @override
  Future<void> setAnalyticsCollectionEnabled(bool enabled) async {
    try {
      await _analytics.setAnalyticsCollectionEnabled(enabled);
    } catch (error) {
      if (kDebugMode) {
        logger.d('‚ùå Error toggling Firebase analytics collection: $error');
      }
    }
  }
}

class _DevToDevAnalyticsBackend implements _AnalyticsBackend {
  _DevToDevAnalyticsBackend(this._devToDev);

  final DevToDevAnalyticsService _devToDev;

  @override
  Future<void> initialize() => _devToDev.initialize();

  @override
  Future<void> setUserId(String? userId) async {
    if (userId == null) {
      await _devToDev.clearUserId();
    } else {
      await _devToDev.setUserId(userId);
    }
  }

  @override
  Future<void> setUserProperty(String name, String value) async {
    await _devToDev.setUserProperty(name, value);
  }

  @override
  Future<void> logScreenView({
    required String screenName,
    required String screenClass,
  }) async {
    await _devToDev.logScreenView(
      screenName: screenName,
      screenClass: screenClass,
    );
  }

  @override
  Future<void> logEvent({
    required String name,
    Map<String, dynamic>? parameters,
  }) async {
    await _devToDev.logEvent(name: name, parameters: parameters);
  }

  @override
  Future<void> setAnalyticsCollectionEnabled(bool enabled) async {
    await _devToDev.setTrackingEnabled(enabled);
  }
}

class _AppsFlyerAnalyticsBackend implements _AnalyticsBackend {
  _AppsFlyerAnalyticsBackend(this._appsFlyer);

  final AppsFlyerService _appsFlyer;

  @override
  Future<void> initialize() => _appsFlyer.initialize();

  @override
  Future<void> setUserId(String? userId) async {
    if (userId != null) {
      await _appsFlyer.setCustomerUserId(userId);
    }
  }

  @override
  Future<void> setUserProperty(String name, String value) async {
    // AppsFlyer doesn't have direct user properties, but we can log custom events
    await _appsFlyer.logEvent(
      eventName: 'user_property_set',
      eventValues: {name: value},
    );
  }

  @override
  Future<void> logScreenView({
    required String screenName,
    required String screenClass,
  }) async {
    await _appsFlyer.logEvent(
      eventName: 'screen_view',
      eventValues: {'screen_name': screenName, 'screen_class': screenClass},
    );
  }

  @override
  Future<void> logEvent({
    required String name,
    Map<String, dynamic>? parameters,
  }) async {
    await _appsFlyer.logEvent(eventName: name, eventValues: parameters);
  }

  @override
  Future<void> setAnalyticsCollectionEnabled(bool enabled) async {
    // AppsFlyer doesn't have a direct method to disable collection
    // This would need to be handled at SDK initialization level
  }
}
