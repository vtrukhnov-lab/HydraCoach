// lib/services/notifications/helpers/timezone_helper.dart

import 'package:shared_preferences/shared_preferences.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest_all.dart' as tz;
import 'package:hydracoach/utils/app_logger.dart';

import '../notification_config.dart';

/// Helper –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏
class TimezoneHelper {
  // –ù–µ —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
  TimezoneHelper._();

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  static Future<void> initialize() async {
    tz.initializeTimeZones();

    String timeZoneName;

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–π–º-–∑–æ–Ω—É –ø–æ —Å–º–µ—â–µ–Ω–∏—é
      final now = DateTime.now();
      final offset = now.timeZoneOffset;

      // –ú–∞–ø–∏–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–º–µ—â–µ–Ω–∏—è –Ω–∞ —Ç–∞–π–º-–∑–æ–Ω—ã
      timeZoneName = _getTimezoneByOffset(offset);

      logger.i(
        'üåç Detected timezone offset: ${offset.inHours}h, using: $timeZoneName',
      );
    } catch (e) {
      logger.i('‚ö†Ô∏è Failed to detect timezone: $e');
      // Fallback –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
      final prefs = await SharedPreferences.getInstance();
      timeZoneName =
          prefs.getString(NotificationConfig.prefUserTimezone) ??
          'Europe/Madrid';
    }

    try {
      tz.setLocalLocation(tz.getLocation(timeZoneName));
      logger.i('üåç Timezone set to: $timeZoneName');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(NotificationConfig.prefUserTimezone, timeZoneName);
    } catch (e) {
      logger.i('‚ö†Ô∏è Failed to set timezone $timeZoneName, using UTC');
      tz.setLocalLocation(tz.UTC);
    }
  }

  /// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –ø–æ —Å–º–µ—â–µ–Ω–∏—é
  static String _getTimezoneByOffset(Duration offset) {
    final hours = offset.inHours;

    switch (hours) {
      case 0:
        return 'Europe/London'; // GMT
      case 1:
        return 'Europe/Madrid'; // CET (–∑–∏–º–æ–π)
      case 2:
        return 'Europe/Madrid'; // CET (–ª–µ—Ç–æ–º) - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é
      case 3:
        return 'Europe/Moscow'; // MSK
      case -5:
        return 'America/New_York'; // EST
      case -8:
        return 'America/Los_Angeles'; // PST
      default:
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–º–µ—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
        return _getFallbackTimezone();
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ fallback –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
  static String _getFallbackTimezone() {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ SharedPreferences —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–µ—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ)
    // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç
    return 'Europe/Madrid';
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DateTime –≤ TZDateTime
  static tz.TZDateTime toTZDateTime(DateTime dateTime) {
    return tz.TZDateTime.from(dateTime, tz.local);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
  static tz.TZDateTime now() {
    return tz.TZDateTime.now(tz.local);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
  static bool isTimeInRange(DateTime time, String startStr, String endStr) {
    final currentMinutes = time.hour * 60 + time.minute;

    final startParts = startStr.split(':');
    final endParts = endStr.split(':');

    final startMinutes =
        int.parse(startParts[0]) * 60 + int.parse(startParts[1]);
    final endMinutes = int.parse(endParts[0]) * 60 + int.parse(endParts[1]);

    if (startMinutes > endMinutes) {
      // –ò–Ω—Ç–µ—Ä–≤–∞–ª —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
      return currentMinutes >= startMinutes || currentMinutes < endMinutes;
    } else {
      // –û–±—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
      return currentMinutes >= startMinutes && currentMinutes < endMinutes;
    }
  }

  /// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∏—Ö–∏–µ —á–∞—Å—ã)
  static DateTime adjustTimeToAvoidRange(
    DateTime scheduledTime,
    String rangeStart,
    String rangeEnd,
  ) {
    if (!isTimeInRange(scheduledTime, rangeStart, rangeEnd)) {
      return scheduledTime;
    }

    final endParts = rangeEnd.split(':');

    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∫–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    DateTime adjusted = DateTime(
      scheduledTime.year,
      scheduledTime.month,
      scheduledTime.day,
      int.parse(endParts[0]),
      int.parse(endParts[1]),
    );

    // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if (adjusted.isBefore(DateTime.now())) {
      adjusted = adjusted.add(const Duration(days: 1));
    }

    return adjusted;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω—è –≥–æ–¥–∞ (1-366)
  static int dayOfYear(DateTime date) {
    final start = DateTime(date.year, 1, 1);
    return date.difference(start).inDays + 1;
  }
}
