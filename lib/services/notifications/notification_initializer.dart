// lib/services/notifications/notification_initializer.dart

import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:firebase_remote_config/firebase_remote_config.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:io';

import 'package:hydracoach/utils/app_logger.dart';

import 'notification_config.dart';
import '../notification_texts.dart';
import 'helpers/timezone_helper.dart';

/// –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class NotificationInitializer {
  final FlutterLocalNotificationsPlugin _localNotifications;
  final FirebaseMessaging _messaging;
  final FirebaseRemoteConfig _remoteConfig;

  NotificationInitializer(
    this._localNotifications,
    this._messaging,
    this._remoteConfig,
  );

  /// –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ë–ï–ó –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  Future<void> initialize() async {
    logger.i('üöÄ Initializing notification system...');

    try {
      // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω
      await _initializeTimezone();

      // 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await _initializeTexts();

      // 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ë–ï–ó –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      await _initializeLocalNotifications();

      // 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase Messaging –ë–ï–ó –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      await _initializeFirebaseMessaging();

      // 5. –ó–∞–≥—Ä—É–∑–∫–∞ Remote Config
      await _initializeRemoteConfig();

      // 6. –ù–ï –ó–ê–ü–†–ê–®–ò–í–ê–ï–ú —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
      // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –±—É–¥—É—Ç –∑–∞–ø—Ä–æ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç –∫–Ω–æ–ø–∫—É
      logger.i('‚úÖ Notification system initialized (permissions not requested)');
    } catch (e) {
      logger.i('‚ùå Critical error during initialization: $e');
      rethrow;
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω
  Future<void> _initializeTimezone() async {
    logger.i('üåç Initializing timezone...');
    await TimezoneHelper.initialize();
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> _initializeTexts() async {
    logger.i('üìù Initializing notification texts...');
    await NotificationTexts.initialize();
    await NotificationTexts.loadLocale();
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ë–ï–ó –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  Future<void> _initializeLocalNotifications() async {
    logger.i(
      'üì± Initializing local notifications (without permission request)...',
    );

    const androidSettings = AndroidInitializationSettings('notification_icon');

    // –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ iOS
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: false, // –ù–ï –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      requestBadgePermission: false, // –ù–ï –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      requestSoundPermission: false, // –ù–ï –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      defaultPresentAlert: true,
      defaultPresentBadge: true,
      defaultPresentSound: true,
    );

    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    await _localNotifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
      onDidReceiveBackgroundNotificationResponse:
          _onBackgroundNotificationTapped,
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è Android
    if (Platform.isAndroid) {
      await _createAndroidChannels();
    }

    logger.i('‚úÖ Local notifications initialized without permission request');
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ Android —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
  Future<void> _createAndroidChannels() async {
    logger.i('üîß Creating Android notification channels...');

    final androidPlugin = _localNotifications
        .resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin
        >();

    if (androidPlugin == null) {
      logger.i('‚ö†Ô∏è Android plugin not available');
      return;
    }

    final currentLocale = NotificationTexts.currentLocale;

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∫–∞–Ω–∞–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –ª–æ–∫–∞–ª–∏
    final defaultChannelId =
        '${NotificationConfig.channelPrefix}_${NotificationConfig.defaultChannelSuffix}_$currentLocale';
    final urgentChannelId =
        '${NotificationConfig.channelPrefix}_${NotificationConfig.urgentChannelSuffix}_$currentLocale';
    final reportChannelId =
        '${NotificationConfig.channelPrefix}_${NotificationConfig.reportChannelSuffix}_$currentLocale';
    final silentChannelId =
        '${NotificationConfig.channelPrefix}_${NotificationConfig.silentChannelSuffix}_$currentLocale';

    // –ö–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è
    await androidPlugin.createNotificationChannel(
      AndroidNotificationChannel(
        defaultChannelId,
        NotificationTexts.channelNameDefault,
        description: NotificationTexts.channelDescDefault,
        importance: Importance.high,
        enableVibration: true,
        playSound: true,
        showBadge: true,
      ),
    );

    // –°—Ä–æ—á–Ω—ã–π –∫–∞–Ω–∞–ª - –∂–∞—Ä–∞, –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    await androidPlugin.createNotificationChannel(
      AndroidNotificationChannel(
        urgentChannelId,
        NotificationTexts.channelNameUrgent,
        description: NotificationTexts.channelDescUrgent,
        importance: Importance.max,
        enableVibration: true,
        playSound: true,
        showBadge: true,
      ),
    );

    // –ö–∞–Ω–∞–ª –æ—Ç—á–µ—Ç–æ–≤ - –≤–µ—á–µ—Ä–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
    await androidPlugin.createNotificationChannel(
      AndroidNotificationChannel(
        reportChannelId,
        NotificationTexts.channelNameReport,
        description: NotificationTexts.channelDescReport,
        importance: Importance.defaultImportance,
        enableVibration: false,
        playSound: true,
        showBadge: true,
      ),
    );

    // –¢–∏—Ö–∏–π –∫–∞–Ω–∞–ª - —Ç–∏—Ö–∏–µ —á–∞—Å—ã PRO
    await androidPlugin.createNotificationChannel(
      AndroidNotificationChannel(
        silentChannelId,
        NotificationTexts.channelNameSilent,
        description: NotificationTexts.channelDescSilent,
        importance: Importance.low,
        enableVibration: false,
        playSound: false,
        showBadge: false,
      ),
    );

    logger.i('‚úÖ Created Android channels for locale: $currentLocale');
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Messaging –ë–ï–ó –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  Future<void> _initializeFirebaseMessaging() async {
    logger.i(
      'üî• Initializing Firebase Messaging (without permission request)...',
    );

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π)
    final token = await _messaging.getToken();
    if (token != null) {
      await _saveFCMTokenToPrefs(token);
      logger.i('üì± FCM token obtained: ${token.substring(0, 20)}...');
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    _messaging.onTokenRefresh.listen((newToken) {
      logger.i('üîÑ FCM token refreshed');
      _saveFCMTokenToPrefs(newToken);
    });

    // –í–ê–ñ–ù–û: –ù–ï –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–¥–µ—Å—å!
    // –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–µ–∑ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞
    if (Platform.isIOS) {
      final settings = await _messaging.getNotificationSettings();
      logger.i(
        'üì± iOS current permission status: ${settings.authorizationStatus}',
      );
    }

    logger.i('‚úÖ Firebase Messaging initialized without permission request');
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ –≤ SharedPreferences
  Future<void> _saveFCMTokenToPrefs(String token) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(NotificationConfig.prefFcmToken, token);
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Remote Config
  Future<void> _initializeRemoteConfig() async {
    logger.i('üì° Initializing Remote Config...');

    try {
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Remote Config
      await _remoteConfig.setConfigSettings(
        RemoteConfigSettings(
          fetchTimeout: const Duration(minutes: 1),
          minimumFetchInterval: const Duration(hours: 1),
        ),
      );

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      await _remoteConfig.setDefaults({
        // –ó–∞–¥–µ—Ä–∂–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        NotificationConfig.rcPostCoffeeDelay:
            NotificationConfig.postCoffeeDelayMinutes,

        // –õ–∏–º–∏—Ç—ã FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        NotificationConfig.rcMaxFreeNotifications:
            NotificationConfig.maxFreeNotificationsDaily,
        NotificationConfig.rcAntiSpamInterval:
            NotificationConfig.freeAntiSpamMinutes,

        // –õ–∏–º–∏—Ç—ã PRO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        NotificationConfig.rcProDailyCap: NotificationConfig.proDailySoftCap,
        NotificationConfig.rcProHardCap: NotificationConfig.proDailyHardCap,

        // –ê–ª–∫–æ–≥–æ–ª—å
        NotificationConfig.rcStandardDrinkGrams:
            NotificationConfig.standardDrinkGrams,
        NotificationConfig.rcAlcoholDrinkBonus:
            NotificationConfig.waterPerStandardDrink,
        NotificationConfig.rcSodiumPerDrink:
            NotificationConfig.sodiumPerStandardDrink,
        NotificationConfig.rcMagnesiumAfterAlc: 200,
        NotificationConfig.rcAlcoholHriRisk: 5,
        NotificationConfig.rcAlcoholHriCap: 30,
        NotificationConfig.rcAlcoholEveningCutoff: '20:00',
      });

      // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      await _remoteConfig.fetchAndActivate();
      logger.i('üì° Remote Config loaded and activated');
    } catch (e) {
      logger.i('‚ö†Ô∏è Remote Config error (using defaults): $e');
    }
  }

  /// –ù–û–í–´–ô –ú–ï–¢–û–î: –Ø–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É
  /// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  /// –ù–ï –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç SCHEDULE_EXACT_ALARM –¥–ª—è Google Play Store compliance
  Future<void> requestSystemNotificationPermissions({
    bool requestExactAlarms = false,
  }) async {
    logger.i('üîê Explicitly requesting notification permissions...');

    // iOS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    if (Platform.isIOS) {
      final settings = await _messaging.requestPermission(
        alert: true,
        badge: true,
        sound: true,
        announcement: false,
        carPlay: false,
        criticalAlert: false,
        provisional: false,
      );

      logger.i(
        'üì± iOS permissions (prompted): ${settings.authorizationStatus}',
      );
    }

    // Android —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    if (Platform.isAndroid) {
      final androidPlugin = _localNotifications
          .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin
          >();

      if (androidPlugin != null) {
        // –ë–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (Android 13+)
        final granted = await androidPlugin.requestNotificationsPermission();
        logger.i(
          'ü§ñ Android notifications permission: ${granted == true ? "granted" : "denied"}',
        );

        // –£–î–ê–õ–ï–ù–û: –¢–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ (Android 12+)
        // –ù–ï –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º SCHEDULE_EXACT_ALARM –¥–ª—è Google Play Store compliance
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ AndroidScheduleMode.inexactAllowWhileIdle
        if (requestExactAlarms) {
          logger.i(
            'ü§ñ Exact alarms –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º inexact scheduling',
          );
        }

        logger.i('ü§ñ Android permissions requested (prompted)');
      }
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<Map<String, dynamic>> restoreNotificationState() async {
    logger.i('üîÑ Restoring notification state...');

    final pending = await _localNotifications.pendingNotificationRequests();
    final Set<int> pendingIds = pending.map((n) => n.id).toSet();

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ñ–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π
    final prefs = await SharedPreferences.getInstance();
    DateTime? lastCoffeeTime;
    final lastCoffeeTimeMs = prefs.getInt(
      NotificationConfig.prefLastCoffeeNotificationTime,
    );
    if (lastCoffeeTimeMs != null) {
      lastCoffeeTime = DateTime.fromMillisecondsSinceEpoch(lastCoffeeTimeMs);
    }

    logger.i('üìÖ Found ${pending.length} pending notifications');
    if (lastCoffeeTime != null) {
      logger.i('‚òï Last coffee notification: $lastCoffeeTime');
    }

    return {
      'pendingIds': pendingIds,
      'lastCoffeeTime': lastCoffeeTime,
      'pendingCount': pending.length,
    };
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<Map<String, dynamic>> getUserNotificationSettings() async {
    final prefs = await SharedPreferences.getInstance();

    return {
      'notificationsEnabled':
          prefs.getBool(NotificationConfig.prefNotificationsEnabled) ?? true,
      'isPro': prefs.getBool(NotificationConfig.prefIsPro) ?? false,
      'quietHoursEnabled':
          prefs.getBool(NotificationConfig.prefQuietHoursEnabled) ?? true,
      'quietHoursStart':
          prefs.getString(NotificationConfig.prefQuietHoursStart) ??
          NotificationConfig.defaultQuietHoursStart,
      'quietHoursEnd':
          prefs.getString(NotificationConfig.prefQuietHoursEnd) ??
          NotificationConfig.defaultQuietHoursEnd,
      'eveningReportTime':
          prefs.getString(NotificationConfig.prefEveningReportTime) ??
          NotificationConfig.defaultEveningReportTime,
      'dietMode': prefs.getString(NotificationConfig.prefDietMode) ?? 'normal',
      'fastingWindowStart':
          prefs.getInt(NotificationConfig.prefFastingWindowStart) ?? 20,
      'fastingWindowEnd':
          prefs.getInt(NotificationConfig.prefFastingWindowEnd) ?? 12,
      'quietFastingMode':
          prefs.getBool(NotificationConfig.prefQuietFastingMode) ?? false,
      'waterReminderTimes': prefs.getString('water_reminder_times'),
    };
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
  Future<void> recreateChannelsForLocale(String localeCode) async {
    if (!Platform.isAndroid) return;

    logger.i('üîß Recreating Android channels for locale: $localeCode');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã
    await NotificationTexts.setLocale(localeCode);

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã
    await _createAndroidChannels();
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ë–ï–ó –∑–∞–ø—Ä–æ—Å–∞
  Future<Map<String, bool>> checkPermissionStatus() async {
    final result = <String, bool>{};

    if (Platform.isAndroid) {
      final androidPlugin = _localNotifications
          .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin
          >();

      if (androidPlugin != null) {
        result['notifications'] =
            await androidPlugin.areNotificationsEnabled() ?? false;
        // –£–î–ê–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ exact alarms –¥–ª—è Google Play Store compliance
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ inexact scheduling, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        result['exactAlarms'] = false; // –í—Å–µ–≥–¥–∞ false, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
      }
    }

    if (Platform.isIOS) {
      final settings = await _messaging.getNotificationSettings();
      result['notifications'] =
          settings.authorizationStatus == AuthorizationStatus.authorized;
      result['badges'] = settings.badge == AppleNotificationSetting.enabled;
      result['sounds'] = settings.sound == AppleNotificationSetting.enabled;
    }

    return result;
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ====================

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–ø–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
  static void _onNotificationTapped(NotificationResponse response) {
    logger.i('üì± Notification tapped: ${response.payload}');
    // –õ–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ FCMHandler
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–ø–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é –≤ —Ñ–æ–Ω–µ
  @pragma('vm:entry-point')
  static void _onBackgroundNotificationTapped(NotificationResponse response) {
    logger.i('üì± Background notification tapped: ${response.payload}');
    // –õ–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ FCMHandler
  }
}
