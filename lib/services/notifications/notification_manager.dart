// lib/services/notifications/notification_manager.dart

import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'dart:convert';

import 'package:hydracoach/utils/app_logger.dart';

import 'notification_types.dart';
import 'notification_sender.dart';
import '../notification_texts.dart';
import '../analytics_service.dart';

/// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: –æ—Ç–º–µ–Ω–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
class NotificationManager {
  final FlutterLocalNotificationsPlugin _localNotifications;
  final NotificationSender _notificationSender;
  final AnalyticsService _analytics;

  NotificationManager(
    this._localNotifications,
    this._notificationSender,
    this._analytics,
  );

  /// –û—Ç–º–µ–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ ID
  Future<void> cancelNotification(int id) async {
    await _localNotifications.cancel(id);
    _notificationSender.pendingNotificationIds.remove(id);
    logger.i('üö´ Notification cancelled: $id');
  }

  /// –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> cancelAllNotifications() async {
    await _localNotifications.cancelAll();
    _notificationSender.pendingNotificationIds.clear();
    _notificationSender.lastNotificationIds.clear();
    logger.i('üóëÔ∏è All notifications cancelled');
  }

  /// –û—Ç–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º
  Future<void> cancelByTypes(Set<NotificationType> types) async {
    final pending = await getPendingNotifications();
    final typeIdxSet = types.map((t) => t.index).toSet();

    for (final notification in pending) {
      final decoded = NotificationSender.decodeNotificationId(notification.id);
      if (typeIdxSet.contains(decoded.typeIdx)) {
        await cancelNotification(notification.id);
      }
    }

    logger.i('üö´ Cancelled notifications for types: $types');
  }

  /// –û—Ç–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
  Future<void> cancelForDay(int dayOfYear) async {
    final pending = await getPendingNotifications();

    for (final notification in pending) {
      final decoded = NotificationSender.decodeNotificationId(notification.id);
      if (decoded.dayFromId == dayOfYear) {
        await cancelNotification(notification.id);
      }
    }

    logger.i('üö´ Cancelled notifications for day: $dayOfYear');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    return await _localNotifications.pendingNotificationRequests();
  }

  /// –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ç–∏–ø–∞–º
  Future<void> printNotificationStatus() async {
    final pending = await getPendingNotifications();
    logger.i('\nüìã ===== NOTIFICATION STATUS =====');
    logger.i('üìã Pending notifications: ${pending.length}');

    if (pending.isNotEmpty) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
      final Map<String, int> typeCount = {};
      final Map<String, List<PendingNotificationRequest>> typeNotifications =
          {};

      for (final notification in pending) {
        final decoded = NotificationSender.decodeNotificationId(
          notification.id,
        );
        final typeName = decoded.typeIdx < NotificationType.values.length
            ? NotificationType.values[decoded.typeIdx].name
            : 'unknown_${decoded.typeIdx}';

        typeCount[typeName] = (typeCount[typeName] ?? 0) + 1;
        typeNotifications.putIfAbsent(typeName, () => []).add(notification);
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
      logger.i('\nüìã Notifications by type:');
      typeCount.forEach((type, count) {
        logger.i('  - $type: $count notifications');
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ 3 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      logger.i('\nüìã Next 3 notifications:');
      for (int i = 0; i < pending.length && i < 3; i++) {
        final notification = pending[i];
        final decoded = NotificationSender.decodeNotificationId(
          notification.id,
        );
        final typeName = decoded.typeIdx < NotificationType.values.length
            ? NotificationType.values[decoded.typeIdx].name
            : 'unknown';

        logger.i('  ${i + 1}. [$typeName] ${notification.title}');
        logger.i(
          '     Time: Day ${decoded.dayFromId}, ${decoded.hour}:${decoded.minute.toString().padLeft(2, '0')}',
        );
      }

      // –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –¥–Ω—è–º (–ø–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π)
      logger.i('\nüìã Schedule by days (next 7):');
      final Map<int, int> dayCount = {};
      for (final notification in pending) {
        final decoded = NotificationSender.decodeNotificationId(
          notification.id,
        );
        dayCount[decoded.dayFromId] = (dayCount[decoded.dayFromId] ?? 0) + 1;
      }

      final sortedDays = dayCount.keys.toList()..sort();
      for (int i = 0; i < sortedDays.length && i < 7; i++) {
        final day = sortedDays[i];
        logger.i('  Day $day: ${dayCount[day]} notifications');
      }
    }

    logger.i('üìã =================================\n');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<Map<String, dynamic>> getNotificationStats() async {
    final pending = await getPendingNotifications();
    final Map<String, int> typeCount = {};
    final Map<int, int> dayCount = {};

    for (final notification in pending) {
      final decoded = NotificationSender.decodeNotificationId(notification.id);
      final typeName = decoded.typeIdx < NotificationType.values.length
          ? NotificationType.values[decoded.typeIdx].name
          : 'unknown';

      typeCount[typeName] = (typeCount[typeName] ?? 0) + 1;
      dayCount[decoded.dayFromId] = (dayCount[decoded.dayFromId] ?? 0) + 1;
    }

    return {
      'total': pending.length,
      'byType': typeCount,
      'byDay': dayCount,
      'nextNotifications': pending
          .take(5)
          .map((n) => {'id': n.id, 'title': n.title, 'body': n.body})
          .toList(),
    };
  }

  /// –ü–æ–∏—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É
  Future<List<PendingNotificationRequest>> findNotificationsByType(
    NotificationType type,
  ) async {
    final pending = await getPendingNotifications();
    final result = <PendingNotificationRequest>[];

    for (final notification in pending) {
      final decoded = NotificationSender.decodeNotificationId(notification.id);
      if (decoded.typeIdx == type.index) {
        result.add(notification);
      }
    }

    return result;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
  Future<bool> hasNotificationType(NotificationType type) async {
    final notifications = await findNotificationsByType(type);
    return notifications.isNotEmpty;
  }

  /// –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
  Future<void> sendTestNotification() async {
    await NotificationTexts.ensureLoaded();

    await _notificationSender.sendNotification(
      type: NotificationType.custom,
      title: NotificationTexts.testTitle,
      body: NotificationTexts.testBody,
      payload: {'action': 'test'},
      skipChecks: true,
    );

    await _analytics.logTestEvent();
    logger.i('üß™ Test notification sent');
  }

  /// –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É)
  Future<void> scheduleTestIn1Minute() async {
    await NotificationTexts.ensureLoaded();

    final scheduledTime = DateTime.now().add(const Duration(minutes: 1));

    await _notificationSender.sendNotification(
      type: NotificationType.custom,
      title: NotificationTexts.testScheduledTitle,
      body: NotificationTexts.testScheduledBody,
      scheduledTime: scheduledTime,
      payload: {'action': 'test_scheduled'},
      skipChecks: true,
    );

    logger.i('üß™ Test notification scheduled for 1 minute');
  }

  /// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å)
  Future<void> cleanupExpiredNotifications() async {
    final pending = await getPendingNotifications();
    final now = DateTime.now();
    int cleanedCount = 0;

    for (final notification in pending) {
      final decoded = NotificationSender.decodeNotificationId(notification.id);

      // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –∏–∑ ID (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω–æ–π –±–µ–∑ –≥–æ–¥–∞)
      final notificationDay = decoded.dayFromId;
      final currentDay = now.difference(DateTime(now.year, 1, 1)).inDays + 1;

      // –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –≤—á–µ—Ä–∞ –∏–ª–∏ —Ä–∞–Ω—å—à–µ
      if (notificationDay < currentDay - 1) {
        await cancelNotification(notification.id);
        cleanedCount++;
      }
    }

    if (cleanedCount > 0) {
      logger.i('üßπ Cleaned up $cleanedCount expired notifications');
    }
  }

  /// –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  Future<String> exportNotificationsToJson() async {
    final pending = await getPendingNotifications();
    final List<Map<String, dynamic>> exportData = [];

    for (final notification in pending) {
      final decoded = NotificationSender.decodeNotificationId(notification.id);
      final typeName = decoded.typeIdx < NotificationType.values.length
          ? NotificationType.values[decoded.typeIdx].name
          : 'unknown';

      exportData.add({
        'id': notification.id,
        'type': typeName,
        'typeIndex': decoded.typeIdx,
        'title': notification.title,
        'body': notification.body,
        'day': decoded.dayFromId,
        'hour': decoded.hour,
        'minute': decoded.minute,
        'payload': notification.payload,
      });
    }

    final result = {
      'exportTime': DateTime.now().toIso8601String(),
      'totalCount': pending.length,
      'notifications': exportData,
    };

    return jsonEncode(result);
  }
}
