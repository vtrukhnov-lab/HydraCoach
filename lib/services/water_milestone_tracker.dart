import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/foundation.dart';
import 'analytics_service.dart';
import 'package:hydracoach/utils/app_logger.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è milestone —Å–æ–±—ã—Ç–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 100% –≤–æ–¥—ã
/// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ AppsFlyer –¥–ª—è –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
class WaterMilestoneTracker {
  static const String _keyPrefix = 'water_milestone_';
  static const String _onboardingCompleteKey = 'onboarding_completed';
  static const String _installDateKey = 'app_install_date';
  static const String _daysWithGoalKey = 'days_with_100_goal';
  static const String _consecutiveDaysKey = 'consecutive_100_days';
  static const String _lastGoalDateKey = 'last_100_goal_date';

  final AnalyticsService _analytics = AnalyticsService();

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 100% –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏ –ø–æ –≤–æ–¥–µ
  Future<void> checkAndLogWaterGoalAchieved() async {
    final prefs = await SharedPreferences.getInstance();
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ª–æ–≥–∏—Ä–æ–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
    final lastGoalDateStr = prefs.getString(_lastGoalDateKey);
    if (lastGoalDateStr != null) {
      final lastGoalDate = DateTime.parse(lastGoalDateStr);
      if (_isSameDay(lastGoalDate, today)) {
        // –£–∂–µ –ª–æ–≥–∏—Ä–æ–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        return;
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    String? installDateStr = prefs.getString(_installDateKey);
    if (installDateStr == null) {
      // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏
      await prefs.setString(_installDateKey, today.toIso8601String());
      installDateStr = today.toIso8601String();
    }
    final installDate = DateTime.parse(installDateStr);

    // –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å —Å –º–æ–º–µ–Ω—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    final daysSinceInstall = today.difference(installDate).inDays + 1;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    int totalDaysWithGoal = prefs.getInt(_daysWithGoalKey) ?? 0;
    totalDaysWithGoal++;
    await prefs.setInt(_daysWithGoalKey, totalDaysWithGoal);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º consecutive days
    int consecutiveDays = prefs.getInt(_consecutiveDaysKey) ?? 0;
    if (lastGoalDateStr != null) {
      final lastGoalDate = DateTime.parse(lastGoalDateStr);
      final daysDiff = today.difference(lastGoalDate).inDays;
      if (daysDiff == 1) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º streak
        consecutiveDays++;
      } else {
        // Streak –ø—Ä–µ—Ä–≤–∞–Ω
        consecutiveDays = 1;
      }
    } else {
      consecutiveDays = 1;
    }
    await prefs.setInt(_consecutiveDaysKey, consecutiveDays);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    await prefs.setString(_lastGoalDateKey, today.toIso8601String());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º milestone —Å–æ–±—ã—Ç–∏—è
    await _checkAndSendMilestones(
      daysSinceInstall: daysSinceInstall,
      totalDaysWithGoal: totalDaysWithGoal,
      consecutiveDays: consecutiveDays,
      prefs: prefs,
    );
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ milestone —Å–æ–±—ã—Ç–∏–π
  Future<void> _checkAndSendMilestones({
    required int daysSinceInstall,
    required int totalDaysWithGoal,
    required int consecutiveDays,
    required SharedPreferences prefs,
  }) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º milestone —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º 100%
    // –ù–µ –≤–∞–∂–Ω–æ –≤ –∫–∞–∫–∏–µ –¥–Ω–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ - –≤–∞–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    // –°–ø–∏—Å–æ–∫ milestone –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    final milestones = [1, 2, 3, 5, 7, 10, 14];

    for (final milestone in milestones) {
      if (totalDaysWithGoal >= milestone) {
        final key = '${_keyPrefix}${milestone}days';
        if (!prefs.containsKey(key)) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
          await _analytics.logWaterGoalMilestone(totalDays: milestone);
          await prefs.setBool(key, true);

          if (kDebugMode) {
            final eventName = milestone == 1
                ? 'water_goal_100_first'
                : 'water_goal_100_${milestone}days';
            logger.i(
              'üéØ Milestone: $eventName (reached 100% in $milestone total days)',
            );
          }
        }
      }
    }
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ (–æ–¥–∏–Ω —Ä–∞–∑)
  Future<void> logOnboardingComplete() async {
    final prefs = await SharedPreferences.getInstance();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
    if (prefs.containsKey(_onboardingCompleteKey)) {
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    await _analytics.logOnboardingComplete();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    await prefs.setBool(_onboardingCompleteKey, true);

    if (kDebugMode) {
      logger.i('üéØ Milestone: onboarding_complete (one-time event)');
    }
  }

  /// –°–±—Ä–æ—Å –≤—Å–µ—Ö milestone –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ debug)
  Future<void> resetMilestones() async {
    if (!kDebugMode) return;

    final prefs = await SharedPreferences.getInstance();

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ milestone —Ñ–ª–∞–≥–∏
    final milestones = [1, 2, 3, 5, 7, 10, 14];
    for (final milestone in milestones) {
      await prefs.remove('${_keyPrefix}${milestone}days');
    }
    await prefs.remove(_onboardingCompleteKey);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    await prefs.remove(_daysWithGoalKey);
    await prefs.remove(_consecutiveDaysKey);
    await prefs.remove(_lastGoalDateKey);
    await prefs.remove(_installDateKey);

    logger.i('üîÑ All milestones reset for testing');
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ª–∏ –¥–µ–Ω—å
  bool _isSameDay(DateTime date1, DateTime date2) {
    return date1.year == date2.year &&
        date1.month == date2.month &&
        date1.day == date2.day;
  }
}
