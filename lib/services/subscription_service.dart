import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'dart:async';
import 'analytics_service.dart';
import 'devtodev_analytics_service.dart'
    show DevToDevAnalyticsService, SubscriptionEventType;
import 'package:hydracoach/utils/app_logger.dart';

/*
üß™ –ù–ê–°–¢–†–û–ô–ö–ê –¢–ï–°–¢–û–í–´–• –ü–û–ö–£–ü–û–ö –í GOOGLE PLAY CONSOLE:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Google Play Console ‚Üí –í–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí Testing ‚Üí Closed testing
2. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –¥–æ—Ä–æ–∂–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Internal Testing")
3. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–µ—Ä–æ–≤:
   - test@playcus.com
   - vtrukhnov.lab@gmail.com
   - qa@playcus.com
   - –∏ –¥—Ä—É–≥–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ _testAccounts

4. –í —Ä–∞–∑–¥–µ–ª–µ "Monetization" ‚Üí "Products" ‚Üí "In-app products":
   - –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã
   - –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å–º–æ–≥—É—Ç –ø–æ–∫—É–ø–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ

5. –í Release Management ‚Üí Test tracks ‚Üí Internal Testing:
   - –ó–∞–≥—Ä—É–∑–∏—Ç–µ APK/AAB —Å —ç—Ç–∏–º –∫–æ–¥–æ–º
   - –¢–µ—Å—Ç–µ—Ä—ã –ø–æ–ª—É—á–∞—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏

–†–ï–ó–£–õ–¨–¢–ê–¢:
- –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: –ø–æ–∫—É–ø–∫–∏ –ë–ï–°–ü–õ–ê–¢–ù–û (–Ω–æ —Å–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è)
- –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –ü–õ–ê–¢–ù–´–ï –ø–æ–∫—É–ø–∫–∏
- –í—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –≤ Firebase/AppsFlyer
*/

class SubscriptionProduct {
  const SubscriptionProduct({
    required this.identifier,
    required this.title,
    required this.description,
    required this.priceText,
    required this.billingPeriod,
  });

  final String identifier;
  final String title;
  final String description;
  final String priceText;
  final Duration billingPeriod;
}

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ RevenueCat
class StoreProduct {
  final String identifier;
  final String title;
  final String description;
  final double price;
  final String priceString;

  StoreProduct({
    required this.identifier,
    required this.title,
    required this.description,
    required this.price,
    required this.priceString,
  });
}

class SubscriptionService extends ChangeNotifier {
  static SubscriptionService? _instance;
  static SubscriptionService get instance =>
      _instance ??= SubscriptionService._();

  SubscriptionService._();

  static const _isProKey = 'is_pro';
  static const _proExpiresAtKey = 'pro_expires_at';
  static const _isTrialKey = 'is_trial';
  static const _trialUsedKey = 'trial_used';

  // Google Play subscription product IDs
  static const String _yearlyProductId = 'hydracoach_pro_yearly';
  static const String _yearlyNoTrialProductId =
      'hydracoach_pro_yearly_no_trial';
  static const String _monthlyProductId = 'hydracoach_pro_monthly';

  // Google Play one-time purchase (lifetime)
  static const String _lifetimeProductId = 'hydracoach_pro_lifetime';

  final InAppPurchase _inAppPurchase = InAppPurchase.instance;
  late StreamSubscription<List<PurchaseDetails>> _subscription;

  // –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Google Play –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  static const List<String> _testAccounts = [
    'test@playcus.com',
    'tester1@playcus.com',
    'tester2@playcus.com',
    'qa@playcus.com',
    'beta@playcus.com',
    'vtrukhnov.lab@gmail.com', // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
    // –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å—é–¥–∞
  ];

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
  static final List<String> _runtimeTestAccounts = [];

  final AnalyticsService _analytics = AnalyticsService();
  final DevToDevAnalyticsService _devToDev = DevToDevAnalyticsService();

  static const List<SubscriptionProduct> _defaultProducts = [
    SubscriptionProduct(
      identifier: 'hydracoach_pro_yearly',
      title: 'HydraCoach PRO ‚Äî –ì–æ–¥–æ–≤–∞—è',
      description:
          '–í—Å–µ PRO —Ñ—É–Ω–∫—Ü–∏–∏, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã',
      priceText: '2 290 ‚ÇΩ / –≥–æ–¥',
      billingPeriod: Duration(days: 365),
    ),
    SubscriptionProduct(
      identifier: 'hydracoach_pro_monthly',
      title: 'HydraCoach PRO ‚Äî –ú–µ—Å—è—á–Ω–∞—è',
      description: '–ì–∏–±–∫–∏–π –¥–æ—Å—Ç—É–ø –∫ PRO —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —Å –ø–æ–º–µ—Å—è—á–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π',
      priceText: '249 ‚ÇΩ / –º–µ—Å—è—Ü',
      billingPeriod: Duration(days: 30),
    ),
  ];

  bool _isInitialized = false;
  bool _isPro = false;
  bool _isTrial = false;
  bool _trialUsed = false;
  List<ProductDetails> _products = [];

  bool get isPro => _isPro;
  bool get isInitialized => _isInitialized;
  bool get isTrial => _isTrial;
  bool get trialUsed => _trialUsed;
  bool get canStartTrial => !_trialUsed;
  List<ProductDetails> get products => _products;

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  ProductDetails? get yearlyProduct {
    final products = _products.where((p) => p.id == _yearlyProductId);
    // Prefer non-free products to handle Google Play test products
    return products
            .where(
              (p) =>
                  p.price != 'Free' && !p.price.toLowerCase().contains('free'),
            )
            .firstOrNull ??
        products.firstOrNull;
  }

  ProductDetails? get yearlyNoTrialProduct {
    final products = _products.where((p) => p.id == _yearlyNoTrialProductId);
    // Prefer non-free products to handle Google Play test products
    return products
            .where(
              (p) =>
                  p.price != 'Free' && !p.price.toLowerCase().contains('free'),
            )
            .firstOrNull ??
        products.firstOrNull;
  }

  ProductDetails? get monthlyProduct {
    final products = _products.where((p) => p.id == _monthlyProductId);
    // Prefer non-free products to handle Google Play test products
    return products
            .where(
              (p) =>
                  p.price != 'Free' && !p.price.toLowerCase().contains('free'),
            )
            .firstOrNull ??
        products.firstOrNull;
  }

  ProductDetails? get lifetimeProduct {
    final products = _products.where((p) => p.id == _lifetimeProductId);
    // Prefer non-free products to handle Google Play test products
    return products
            .where(
              (p) =>
                  p.price != 'Free' && !p.price.toLowerCase().contains('free'),
            )
            .firstOrNull ??
        products.firstOrNull;
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤—ã–º
  bool _isTestAccount() {
    // –í —Ä–µ–ª–∏–∑–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    // TODO: –í –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // final userEmail = getCurrentUserEmail();
    // return _testAccounts.contains(userEmail) || _runtimeTestAccounts.contains(userEmail);

    // –ü–æ–∫–∞ —á—Ç–æ –≤ —Ä–µ–ª–∏–∑–µ –Ω–∏–∫—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    return false;
  }

  // RELEASE: Test account methods removed for production

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  static List<String> getTestAccounts() {
    return [..._testAccounts, ..._runtimeTestAccounts];
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Play –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  Future<void> initialize() async {
    if (_isInitialized) return;

    await _restoreFromStorage();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫
    final bool isAvailable = await _inAppPurchase.isAvailable();
    if (!isAvailable) {
      // RELEASE: Debug mode disabled
      if (false) {
        logger.e('‚ùå In-app purchases not available');
      }
      _isInitialized = true;
      return;
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–æ–∫
    _subscription = _inAppPurchase.purchaseStream.listen(
      _onPurchaseUpdate,
      onDone: () => _subscription.cancel(),
      onError: (error) {
        // RELEASE: Debug mode disabled
        if (false) {
          logger.e('‚ùå Purchase stream error: $error');
        }
      },
    );

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    await _loadProducts();

    _isInitialized = true;

    // RELEASE: Debug mode disabled
    if (false) {
      logger.i('‚úÖ SubscriptionService initialized');
      logger.i('üîí PRO status: $_isPro');
      logger.i('üì¶ Products loaded: ${_products.length}');
    }
  }

  Future<void> _restoreFromStorage() async {
    final prefs = await SharedPreferences.getInstance();
    final storedIsPro = prefs.getBool(_isProKey) ?? false;
    final storedIsTrial = prefs.getBool(_isTrialKey) ?? false;
    final storedTrialUsed = prefs.getBool(_trialUsedKey) ?? false;
    final expiryIso = prefs.getString(_proExpiresAtKey);
    DateTime? expiry;

    _trialUsed = storedTrialUsed;

    if (expiryIso != null) {
      expiry = DateTime.tryParse(expiryIso);
    }

    if (storedIsPro) {
      if (expiry != null && DateTime.now().isBefore(expiry)) {
        // –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è
        _isPro = true;
        _isTrial = storedIsTrial;
        // RELEASE: Debug mode disabled
        if (false) {
          logger.i(
            '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å—Ç–µ–∫–∞–µ—Ç: ${expiry.toIso8601String()}',
          );
        }
        return;
      } else if (expiry != null && DateTime.now().isAfter(expiry)) {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ ‚Äî —á–∏—Å—Ç–∏–º —Ñ–ª–∞–≥–∏
        // RELEASE: Debug mode disabled
        if (false) {
          logger.i('‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞: ${expiry.toIso8601String()}');
        }
        await prefs.remove(_isProKey);
        await prefs.remove(_proExpiresAtKey);
        await prefs.remove(_isTrialKey);
        _isPro = false;
        _isTrial = false;
        return;
      } else if (expiry == null) {
        // Legacy –ø–æ–¥–ø–∏—Å–∫–∞ –±–µ–∑ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
        _isPro = true;
        _isTrial = false;
        // RELEASE: Debug mode disabled
        if (false) {
          logger.i('‚úÖ Legacy –ø–æ–¥–ø–∏—Å–∫–∞ –±–µ–∑ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è');
        }
        return;
      }
    }

    // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    _isPro = false;
    _isTrial = false;
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ Google Play
  Future<void> _loadProducts() async {
    try {
      final Set<String> productIds = {
        _yearlyProductId,
        _yearlyNoTrialProductId,
        _monthlyProductId,
        _lifetimeProductId,
      };
      final ProductDetailsResponse response = await _inAppPurchase
          .queryProductDetails(productIds);

      if (response.error != null) {
        // RELEASE: Debug mode disabled
        if (false) {
          logger.e('‚ùå Failed to load products: ${response.error}');
        }
        return;
      }

      _products = response.productDetails;

      // RELEASE: Debug mode disabled
      if (false) {
        logger.i('üì¶ Loaded ${_products.length} products:');
        for (final product in _products) {
          logger.i('   - ${product.id}: ${product.price}');
        }
      }
    } catch (e) {
      // RELEASE: Debug mode disabled
      if (false) {
        logger.e('‚ùå Error loading products: $e');
      }
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∫—É–ø–æ–∫
  void _onPurchaseUpdate(List<PurchaseDetails> purchaseDetailsList) {
    for (final PurchaseDetails purchaseDetails in purchaseDetailsList) {
      _handlePurchase(purchaseDetails);
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
  Future<void> _handlePurchase(PurchaseDetails purchaseDetails) async {
    if (purchaseDetails.status == PurchaseStatus.purchased ||
        purchaseDetails.status == PurchaseStatus.restored) {
      // –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º PRO
      final product = _products.firstWhere(
        (p) => p.id == purchaseDetails.productID,
        orElse: () => throw Exception('Product not found'),
      );

      Duration billingPeriod;
      if (purchaseDetails.productID == _lifetimeProductId) {
        // Lifetime –ø–æ–∫—É–ø–∫–∞ - –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç (100 –ª–µ—Ç)
        billingPeriod = const Duration(days: 36500);
      } else if (purchaseDetails.productID == _yearlyProductId ||
          purchaseDetails.productID == _yearlyNoTrialProductId) {
        billingPeriod = const Duration(days: 365);
      } else {
        billingPeriod = const Duration(days: 30);
      }

      await _activatePro(billingPeriod);

      // üî• Purchase Connector –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç af_ars_ —Å–æ–±—ã—Ç–∏—è
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è AppsFlyer –¥–ª—è Live Events
      if (purchaseDetails.status == PurchaseStatus.purchased) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏ –≤–∞–ª—é—Ç—É –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞
          double price = 0.0;
          String currency = 'USD';

          // –í Android rawPrice –∏ currencyCode –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º price
          if (product.price.isNotEmpty) {
            // –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä "$35.99" -> 35.99)
            final priceString = product.price.replaceAll(RegExp(r'[^\d.]'), '');
            price = double.tryParse(priceString) ?? 0.0;

            // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞–ª—é—Ç—É –∏–∑ —Å–∏–º–≤–æ–ª–∞
            if (product.price.contains('‚Ç¨')) {
              currency = 'EUR';
            } else if (product.price.contains('¬£')) {
              currency = 'GBP';
            } else if (product.price.contains('‚ÇΩ')) {
              currency = 'RUB';
            } else if (product.price.contains('\$')) {
              currency = 'USD';
            }
          }

          // –ù–ï –ù–£–ñ–ù–û! Purchase Connector –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç af_ars_subscribe —á–µ—Ä–µ–∑ S2S
          // SDK —Å–æ–±—ã—Ç–∏–µ af_subscribe –Ω–µ –Ω—É–∂–Ω–æ - —ç—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
          // final eventName = purchaseDetails.productID.contains('trial') ? 'af_start_trial' : 'af_subscribe';
          // await _analytics.logSubscriptionPurchased(
          //   productId: purchaseDetails.productID,
          //   price: price,
          //   currency: currency,
          //   transactionId: purchaseDetails.purchaseID ?? '',
          // );

          // üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ DevToDev (legacy –º–µ—Ç–æ–¥)
          await _devToDev.subscriptionPayment(
            orderId:
                purchaseDetails.purchaseID ??
                DateTime.now().millisecondsSinceEpoch.toString(),
            price: price,
            productId: purchaseDetails.productID,
            currencyCode: currency,
          );

          // üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ DevToDev Subscription API
          final now = DateTime.now();
          final expiryDate = now.add(billingPeriod);
          final isTrial = purchaseDetails.productID == _yearlyProductId;

          await _devToDev.sendSubscriptionEvent(
            eventType: isTrial
                ? SubscriptionEventType.trialPurchase
                : SubscriptionEventType.purchase,
            transactionId:
                purchaseDetails.purchaseID ??
                DateTime.now().millisecondsSinceEpoch.toString(),
            originalTransactionId:
                purchaseDetails.purchaseID ??
                DateTime.now().millisecondsSinceEpoch.toString(),
            startDateMs: now.millisecondsSinceEpoch,
            expiresDateMs: expiryDate.millisecondsSinceEpoch,
            productId: purchaseDetails.productID,
            price: price,
            currency: currency,
            isTrial: isTrial,
          );

          if (kDebugMode) {
            logger.i('üí∞ Subscription purchased: ${purchaseDetails.productID}');
            logger.i(
              '   Purchase Connector –æ—Ç–ø—Ä–∞–≤–∏—Ç S2S —Å–æ–±—ã—Ç–∏–µ: af_ars_sandbox_s2s',
            );
            logger.i(
              '   SDK —Å–æ–±—ã—Ç–∏–µ af_subscribe –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)',
            );
            logger.i(
              'üìä DevToDev: subscriptionPayment –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (${purchaseDetails.productID}, $price $currency)',
            );
            logger.i(
              'üìä DevToDev Subscription API: ${isTrial ? "TRIAL_PURCHASE" : "PURCHASE"} —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            );
          }
        } catch (e) {
          if (kDebugMode) {
            logger.w('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: $e');
          }
        }
      }

      // RELEASE: Debug mode disabled
      if (true) {
        final action = purchaseDetails.status == PurchaseStatus.restored
            ? 'restored'
            : 'completed';
        logger.i('‚úÖ Purchase $action: ${purchaseDetails.productID}');
      }
    } else if (purchaseDetails.status == PurchaseStatus.error) {
      // RELEASE: Debug mode disabled
      if (false) {
        logger.e('‚ùå Purchase failed: ${purchaseDetails.error}');
      }
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É –¥–ª—è Android
    if (purchaseDetails.pendingCompletePurchase) {
      await _inAppPurchase.completePurchase(purchaseDetails);
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ (–º–æ–∫-–¥–∞–Ω–Ω—ã–µ)
  Future<List<SubscriptionProduct>> getAvailableProducts() async {
    return List.unmodifiable(_defaultProducts);
  }

  /// –ü–æ–∫—É–ø–∫–∞ –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —Å —É—á–µ—Ç–æ–º trial –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
  Future<bool> purchaseYearlySubscription({required bool withTrial}) async {
    final productId = withTrial ? _yearlyProductId : _yearlyNoTrialProductId;
    return purchaseSubscription(productId);
  }

  /// –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Google Play Billing
  Future<bool> purchaseSubscription(String productId) async {
    if (!_isInitialized) {
      throw Exception('SubscriptionService not initialized');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ –ø–æ–∫—É–ø–∫–∏
    final bool isAvailable = await _inAppPurchase.isAvailable();
    if (!isAvailable) {
      throw Exception('In-app purchases not available');
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç
    logger.d('üîç Looking for product: $productId');
    logger.d('üîç Available products: ${_products.map((p) => p.id).join(', ')}');
    final ProductDetails? product = _products
        .where((p) => p.id == productId)
        .firstOrNull;
    if (product == null) {
      logger.e('‚ùå Product not found: $productId');
      throw Exception('Product not found: $productId');
    }

    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      logger.i('üõçÔ∏è Starting purchase for: ${product.id}');
      logger.i('üí∞ Price: ${product.price}');

      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∫—É–ø–∫–∏
      final PurchaseParam purchaseParam = PurchaseParam(
        productDetails: product,
      );

      // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
      final bool purchaseResult = await _inAppPurchase.buyNonConsumable(
        purchaseParam: purchaseParam,
      );

      // RELEASE: Debug mode disabled
      if (false) {
        logger.i('üîÑ Purchase initiated: $purchaseResult');
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false - —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ purchaseStream
      // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é PRO —Å—Ç–∞—Ç—É—Å–∞
      return false;
    } catch (e) {
      // RELEASE: Debug mode disabled
      if (false) {
        logger.e('‚ùå Purchase error: $e');
      }
      rethrow;
    }
  }

  /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ —á–µ—Ä–µ–∑ Google Play
  Future<bool> restorePurchases() async {
    if (!_isInitialized) {
      throw Exception('SubscriptionService not initialized');
    }

    try {
      // RELEASE: Debug mode disabled
      if (true) {
        logger.i('üîÑ Starting restore purchases...');
        logger.i('üîÑ Current PRO status before restore: $_isPro');
      }

      // DEBUG: –°–∏–º—É–ª—è—Ü–∏—è successful restore –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
      if (kDebugMode && false) {
        // –í–∫–ª—é—á–∏ `true` –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.d('üß™ DEBUG: Simulating successful restore...');
        await _activatePro(const Duration(days: 365), isTrial: false);
        logger.i('‚úÖ DEBUG: Simulated restore completed. PRO status: $_isPro');
        return true;
      }

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ Google Play
      await _inAppPurchase.restorePurchases();

      // RELEASE: Debug mode disabled
      if (true) {
        logger.i(
          'üîÑ restorePurchases() called, waiting for purchaseStream updates...',
        );
      }

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã purchaseStream —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
      await Future.delayed(const Duration(milliseconds: 500));

      // –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      await _restoreFromStorage();

      // RELEASE: Debug mode disabled
      if (true) {
        logger.i('‚úÖ Restore completed. PRO status: $_isPro');
      }

      return _isPro;
    } catch (e) {
      // RELEASE: Debug mode disabled
      if (false) {
        logger.e('‚ùå Restore error: $e');
      }
      rethrow;
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> _activatePro(
    Duration billingPeriod, {
    bool isTrial = false,
  }) async {
    _isPro = true;
    _isTrial = isTrial;

    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_isProKey, true);
    await prefs.setBool(_isTrialKey, isTrial);

    if (isTrial) {
      await prefs.setBool(_trialUsedKey, true);
      _trialUsed = true;
    }

    final expiryDate = DateTime.now().add(billingPeriod);
    await prefs.setString(_proExpiresAtKey, expiryDate.toIso8601String());

    // RELEASE: Debug mode disabled
    if (false) {
      logger.i('‚úÖ PRO –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ: ${expiryDate.toIso8601String()}');
      logger.i('   Trial: $isTrial');
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    notifyListeners();
  }

  /// –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (7 –¥–Ω–µ–π)
  Future<bool> startFreeTrial() async {
    if (_trialUsed || _isPro) {
      return false; // –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞
    }

    try {
      await _activatePro(const Duration(days: 7), isTrial: true);

      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ trial
      await _analytics.logTrialStarted(
        product: _yearlyProductId,
        trialDuration: 7,
      );

      // RELEASE: Debug mode disabled
      if (false) {
        logger.i('üéØ 7-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞—á–∞—Ç!');
      }

      return true;
    } catch (e) {
      // RELEASE: Debug mode disabled
      if (false) {
        logger.e('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: $e');
      }
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PRO —Ñ—É–Ω–∫—Ü–∏–∏
  bool hasProAccess() {
    return _isPro;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
  bool hasFeatureAccess(String featureName) {
    const freeFeatures = {
      'basic_tracking',
      'weather_integration',
      'simple_reminders',
      'daily_report',
      'basic_history',
      'alcohol_log',
      'alcohol_harm_reduction',
      'alcohol_morning_checkin',
    };

    if (freeFeatures.contains(featureName)) {
      return true;
    }

    return _isPro;
  }

  Map<String, dynamic> getFreeLimitations() {
    return {
      'max_daily_reminders': 4,
      'history_days': 30,
      'export_available': false,
      'smart_reminders': false,
      'fasting_aware': false,
      'cloud_sync': false,
      'weekly_reports': false,
      'alcohol_pre_drink': false,
      'alcohol_recovery_plan': false,
      'alcohol_sober_calendar': false,
    };
  }

  Map<String, dynamic> getProFeatures() {
    return {
      'unlimited_reminders': true,
      'unlimited_history': true,
      'csv_export': true,
      'smart_reminders': true,
      'fasting_aware_mode': true,
      'cloud_sync': true,
      'weekly_reports': true,
      'contextual_reminders': true,
      'heat_protocols': true,
      'multi_device': true,
      'alcohol_pre_drink_protocol': true,
      'alcohol_recovery_plan': true,
      'alcohol_sober_calendar': true,
      'alcohol_extended_checkin': true,
    };
  }

  /// –ú–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è customer info (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
  Future<Map<String, dynamic>> getCustomerInfo() async {
    final prefs = await SharedPreferences.getInstance();
    final expiryIso = prefs.getString(_proExpiresAtKey);

    return {'isPro': _isPro, 'expiresAt': expiryIso};
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ PRO —Å—Ç–∞—Ç—É—Å–∞ (—É–¥–æ–±–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
  Future<void> resetSubscription() async {
    _isPro = false;
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_isProKey);
    await prefs.remove(_proExpiresAtKey);
  }

  // RELEASE: Mock purchase method removed for production

  /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _subscription.cancel();
  }

  // üî• –£–î–ê–õ–ï–ù–´ legacy –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - Purchase Connector –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
  // –¢–µ–ø–µ—Ä—å —Å–æ–±—ã—Ç–∏—è af_ars_* –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ Purchase Connector
}

class SubscriptionProvider extends ChangeNotifier {
  final SubscriptionService _subscriptionService = SubscriptionService.instance;

  bool get isPro => _subscriptionService.isPro;
  bool get isInitialized => _subscriptionService.isInitialized;
  bool get isTrial => _subscriptionService.isTrial;
  bool get trialUsed => _subscriptionService.trialUsed;
  bool get canStartTrial => _subscriptionService.canStartTrial;

  List<SubscriptionProduct> _availableProducts = const [];
  List<SubscriptionProduct> get availableProducts => _availableProducts;

  bool _isLoading = false;
  bool get isLoading => _isLoading;

  SubscriptionProvider() {
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç SubscriptionService
    _subscriptionService.addListener(_onServiceChanged);
  }

  void _onServiceChanged() {
    // –ö–æ–≥–¥–∞ SubscriptionService –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, —É–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞—à–∏—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    notifyListeners();
  }

  @override
  void dispose() {
    _subscriptionService.removeListener(_onServiceChanged);
    super.dispose();
  }

  Future<void> initialize() async {
    _isLoading = true;

    await _subscriptionService.initialize();
    await loadProducts();

    _isLoading = false;

    await Future.microtask(notifyListeners);
  }

  Future<void> loadProducts() async {
    try {
      _availableProducts = await _subscriptionService.getAvailableProducts();
      if (!_isLoading) {
        notifyListeners();
      }
    } catch (e) {
      // RELEASE: Debug mode disabled
      if (false) {
        logger.e('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: $e');
      }
    }
  }

  Future<bool> purchaseSubscription(String productId) async {
    _isLoading = true;
    notifyListeners();

    final success = await _subscriptionService.purchaseSubscription(productId);

    _isLoading = false;
    notifyListeners();

    return success;
  }

  Future<bool> restorePurchases() async {
    _isLoading = true;
    notifyListeners();

    final success = await _subscriptionService.restorePurchases();

    _isLoading = false;
    notifyListeners();

    return success;
  }

  /// –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
  Future<bool> startFreeTrial() async {
    _isLoading = true;
    notifyListeners();

    try {
      final success = await _subscriptionService.startFreeTrial();
      notifyListeners();
      return success;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  // RELEASE: Mock purchase method removed for production

  bool hasFeatureAccess(String featureName) {
    return _subscriptionService.hasFeatureAccess(featureName);
  }

  Map<String, dynamic> getFreeLimitations() {
    return _subscriptionService.getFreeLimitations();
  }

  Map<String, dynamic> getProFeatures() {
    return _subscriptionService.getProFeatures();
  }
}
