import 'package:flutter/foundation.dart';
import 'package:firebase_remote_config/firebase_remote_config.dart';
import 'package:hydracoach/utils/app_logger.dart';

/// –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –∂–∞—Ä—ã
class HeatAdjustments {
  final double waterAdjustment;
  final int sodiumAdjustment;

  HeatAdjustments(this.waterAdjustment, this.sodiumAdjustment);
}

class RemoteConfigService {
  static RemoteConfigService? _instance;
  static RemoteConfigService get instance =>
      _instance ??= RemoteConfigService._();

  RemoteConfigService._();

  FirebaseRemoteConfig? _remoteConfig;
  bool _initialized = false;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Remote Config
  Future<void> initialize() async {
    if (_initialized) return;

    try {
      _remoteConfig = FirebaseRemoteConfig.instance;

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
      await _remoteConfig!.setConfigSettings(
        RemoteConfigSettings(
          fetchTimeout: const Duration(seconds: 10),
          minimumFetchInterval: kDebugMode
              ? const Duration(seconds: 10) // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
              : const Duration(hours: 1), // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
        ),
      );

      // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏–∑ –¢–ó)
      await _remoteConfig!.setDefaults(_getDefaults());

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      await _remoteConfig!.fetchAndActivate();

      _initialized = true;

      if (kDebugMode) {
        logger.i('‚úÖ Remote Config –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        logger.i('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${_remoteConfig!.getAll().length}');
      }
    } catch (e) {
      if (kDebugMode) {
        logger.e('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Remote Config: $e');
      }
    }
  }

  /// –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –¢–ó
  Map<String, dynamic> _getDefaults() {
    return {
      // üî• –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ñ–æ—Ä–º—É–ª –≤–æ–¥—ã (–º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞)
      'water_min_per_kg': 22.0,
      'water_opt_per_kg': 30.0,
      'water_max_per_kg': 36.0,

      // ‚ö° –≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã –±–∞–∑–æ–≤—ã–µ —Ü–µ–ª–∏ (–º–≥ –≤ –¥–µ–Ω—å)
      'sodium_normal': 2500,
      'sodium_keto': 3500,
      'potassium_normal': 3000,
      'potassium_keto': 3500,
      'magnesium_normal': 350,
      'magnesium_keto': 400,

      // üå°Ô∏è –ü–æ—Ä–æ–≥–∏ Heat Index –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
      'heat_index_low': 27.0, // HI < 27¬∞C: –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
      'heat_index_medium': 32.0, // HI 27-32¬∞C: +5% –≤–æ–¥—ã, +500–º–≥ –Ω–∞—Ç—Ä–∏—è
      'heat_index_high': 39.0, // HI 32-39¬∞C: +8% –≤–æ–¥—ã, +1000–º–≥ –Ω–∞—Ç—Ä–∏—è

      // HI > 39¬∞C: +12% –≤–æ–¥—ã, +1500–º–≥ –Ω–∞—Ç—Ä–∏—è
      'heat_water_adjustment_low': 0.05, // 5%
      'heat_water_adjustment_medium': 0.08, // 8%
      'heat_water_adjustment_high': 0.12, // 12%

      'heat_sodium_adjustment_low': 500, // –º–≥
      'heat_sodium_adjustment_medium': 1000, // –º–≥
      'heat_sodium_adjustment_high': 1500, // –º–≥
      // üìä HRI - –í–ï–°–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í (—Å—É–º–º–∞ = 100)
      'hri_weight_water': 26.0,
      'hri_weight_sodium': 12.0,
      'hri_weight_potassium': 8.0,
      'hri_weight_magnesium': 8.0,
      'hri_weight_heat': 10.0,
      'hri_weight_workout': 12.0,
      'hri_weight_caffeine': 8.0,
      'hri_weight_alcohol': 8.0,
      'hri_weight_time': 4.0,
      'hri_weight_morning': 4.0,

      // üìä HRI - –ü–ê–†–ê–ú–ï–¢–†–´ –†–ê–°–ß–ï–¢–ê
      'caffeine_half_life_hours': 6.0,
      'caffeine_scale_factor': 2.0,
      'alcohol_risk_half_life_hours': 4.0,
      'alc_hri_risk_per_sd': 5.0,
      'alc_hri_risk_cap': 15.0,
      'time_since_last_intake_threshold': 3.0,
      'fasting_suppresses_time_component': true,
      'morning_weight_drop_threshold': 1.0, // % –æ—Ç –º–∞—Å—Å—ã —Ç–µ–ª–∞
      'heat_index_hysteresis': 0.5, // ¬∞C –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—Ä–µ–±–µ–∑–≥–∞
      // üìä –ü–æ—Ä–æ–≥–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏
      'hydration_dehydration_threshold': 0.9, // < 90% –æ—Ç —Ü–µ–ª–∏ –≤–æ–¥—ã
      'hydration_dilution_water_threshold': 1.15, // > 115% –≤–æ–¥—ã
      'hydration_dilution_sodium_threshold': 0.6, // < 60% –Ω–∞—Ç—Ä–∏—è
      'hydration_low_salt_threshold': 0.5, // < 50% –Ω–∞—Ç—Ä–∏—è
      // üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      'max_free_reminders': 4, // FREE: –¥–æ 4 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –¥–µ–Ω—å
      'coffee_reminder_delay_minutes': 45, // –ü–æ—Å–ª–µ –∫–æ—Ñ–µ —á–µ—Ä–µ–∑ 45 –º–∏–Ω—É—Ç
      'reminder_spam_protection_hours': 1, // –ê–Ω—Ç–∏—Å–ø–∞–º: 1 —á–∞—Å –º–µ–∂–¥—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏
      'reminder_daily_limit': 8, // –ú–∞–∫—Å–∏–º—É–º –≤ –¥–µ–Ω—å –¥–ª—è PRO
      // ‚è∞ –¢–∏—Ö–∏–µ —á–∞—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      'quiet_hours_start': 22, // 22:00
      'quiet_hours_end': 7, // 07:00
      // üçΩÔ∏è –†–µ–∂–∏–º Fasting Aware
      'fasting_aware_enabled': true,
      'fasting_electrolyte_reminder_enabled': true,
      'fasting_refeeding_ladder_enabled': true,

      // üí∞ –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–î–ü–ò–°–ö–ò –ò –¶–ï–ù
      'paywall_show_trial': true,
      'trial_duration_days': 7,
      'trial_enabled': true,

      // –¶–µ–Ω—ã –¥–ª—è –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
      'price_annual': 9.99,
      'price_annual_original': 16.99,
      'price_annual_discount': 41,
      'price_annual_currency': '\$',
      'price_annual_period': '–≤ –≥–æ–¥',

      // –¶–µ–Ω—ã –¥–ª—è –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
      'price_monthly': 1.99,
      'price_monthly_currency': '\$',
      'price_monthly_period': '–≤ –º–µ—Å—è—Ü',

      // –¶–µ–Ω–∞ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏
      'price_lifetime': 24.99,
      'price_lifetime_currency': '\$',

      // –¢–µ–∫—Å—Ç—ã –ø–µ–π–≤–æ–ª–∞
      'paywall_title': 'HydraCoach PRO',
      'paywall_subtitle': '–°—Ç–∞–Ω—å –≥–µ—Ä–æ–µ–º –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞!',
      'paywall_button_text': '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
      'paywall_trial_text': '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ',
      'paywall_cancel_text': '–û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è',
      'paywall_best_value_text': '–í–´–ì–û–î–ù–û',
      'paywall_lifetime_text': '–î–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞',
      'paywall_lifetime_subtitle': '–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π',

      // üîß –§–∏—á —Ñ–ª–∞–≥–∏ –¥–ª—è PRO —Ñ—É–Ω–∫—Ü–∏–π
      'feature_smart_reminders': true,
      'feature_weekly_reports': true,
      'feature_csv_export': true,
      'feature_cloud_sync': true,
      'feature_contextual_reminders': true,
      'feature_heat_protocols': true,

      // üîê API Keys (–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ)
      'openweathermap_api_key': 'c460f153f615a343e0fe5158eae73121',

      // üìä SDK –ø–∞–±–ª–∏—à–µ—Ä–∞ (–†–µ–ª–∏–∑ 3)
      'publisher_sdk_enabled': false,
      'appsflyer_enabled': false,
      'sanctioned_countries': '["RU", "BY", "CN", "IR", "KP"]', // JSON —Å—Ç—Ä–æ–∫–∞
      // üéØ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      'ab_paywall_variant': 'default',
      'ab_onboarding_variant': 'standard',

      // ÔøΩ –ê–õ–ö–û–ì–û–õ–¨ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      'std_drink_grams': 10.0,
      'alcohol_drink_bonus_ml': 250.0,
      'na_per_sd_mg': 500.0,
      'mg_per_day_after_alc_mg': 100.0,
      'alc_evening_cutoff_local': 20, // 20:00
      'alc_reminders_max_per_day': 2,
      'sobriety_goals_enabled': true,
      'sober_mode_enabled_default': false,

      // üç¨ –°–ê–•–ê–† –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ù–û–í–û–ï)
      'max_daily_sugar_grams': 25.0, // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –í–û–ó –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞
      'sugar_warning_threshold_grams':
          50.0, // –ü–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
      // –í–ª–∏—è–Ω–∏–µ –Ω–∞ HRI
      'sugar_hri_threshold_grams':
          50.0, // –ü–æ—Ä–æ–≥, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–ª–∏—è–Ω–∏–µ –Ω–∞ HRI
      'sugar_hri_multiplier': 0.2, // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–ª–∏—è–Ω–∏—è
      'sugar_hri_max_impact': 10.0, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ –Ω–∞ HRI
      // –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ –≤ –Ω–∞–ø–∏—Ç–∫–∞—Ö (–≥/100–º–ª)
      'sugar_juice_per_100ml': 12.0, // –§—Ä—É–∫—Ç–æ–≤—ã–π —Å–æ–∫
      'sugar_soda_per_100ml': 10.0, // –ì–∞–∑–∏—Ä–æ–≤–∫–∞
      'sugar_energy_per_100ml': 11.0, // –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏
      'sugar_sports_per_100ml': 6.0, // –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏
      'sugar_beer_per_100ml': 1.0, // –ü–∏–≤–æ
      'sugar_wine_per_100ml': 2.0, // –í–∏–Ω–æ
      'sugar_cocktail_per_100ml': 15.0, // –ö–æ–∫—Ç–µ–π–ª–∏
      'sugar_kombucha_per_100ml': 3.0, // –ö–æ–º–±—É—á–∞
      // –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ –≤ –∫–æ—Ñ–µ –∏ —á–∞–µ
      'sugar_coffee_milk_base': 5.0, // –ë–∞–∑–æ–≤—ã–π —Å–∞—Ö–∞—Ä –æ—Ç –º–æ–ª–æ–∫–∞ –≤ –ª–∞—Ç—Ç–µ/–∫–∞–ø—É—á–∏–Ω–æ
      'sugar_coffee_syrup': 10.0, // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∞—Ö–∞—Ä –æ—Ç —Å–∏—Ä–æ–ø–∞
      'sugar_sweet_tea': 8.0, // –°–ª–∞–¥–∫–∏–π —á–∞–π (–Ω–∞ –ø–æ—Ä—Ü–∏—é)
      // –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ –≤ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
      'sugar_smoothie_per_250ml': 20.0, // –°–º—É–∑–∏ (–Ω–∞ 250–º–ª)
      'sugar_protein_shake': 5.0, // –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å (–Ω–∞ –ø–æ—Ä—Ü–∏—é)
      'sugar_fruit_serving': 10.0, // –§—Ä—É–∫—Ç—ã (—Å—Ä–µ–¥–Ω—è—è –ø–æ—Ä—Ü–∏—è)
      'sugar_yogurt_lactose': 5.0, // –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –π–æ–≥—É—Ä—Ç (–ª–∞–∫—Ç–æ–∑–∞)
      'sugar_yogurt_flavored': 10.0, // –ê—Ä–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –π–æ–≥—É—Ä—Ç (–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π)
      // –°–∫—Ä—ã—Ç—ã–µ —Å–∞—Ö–∞—Ä–∞
      'sugar_sauce_average': 5.0, // –°–æ—É—Å—ã (—Å—Ä–µ–¥–Ω—è—è –ø–æ—Ä—Ü–∏—è)
      'sugar_bread_serving': 3.0, // –•–ª–µ–± (–ø–æ—Ä—Ü–∏—è)
      'sugar_dessert_average': 20.0, // –î–µ—Å–µ—Ä—Ç—ã (—Å—Ä–µ–¥–Ω—è—è –ø–æ—Ä—Ü–∏—è)
      'sugar_snack_average': 10.0, // –°–Ω–µ–∫–∏ (—Å—Ä–µ–¥–Ω—è—è –ø–æ—Ä—Ü–∏—è)
      'sugar_meal_hidden': 5.0, // –°–∫—Ä—ã—Ç—ã–π —Å–∞—Ö–∞—Ä –≤ –æ–±—ã—á–Ω–æ–π –µ–¥–µ
      // –í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è UI
      'sugar_green_threshold': 25.0, // –î–æ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è - –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
      'sugar_yellow_threshold': 50.0, // –î–æ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è - –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
      'sugar_orange_threshold': 75.0, // –î–æ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è - –æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç
      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–æ–¥—ã –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º —Å–∞—Ö–∞—Ä–µ
      'sugar_water_bonus_25_50':
          250, // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–æ–¥–∞ –ø—Ä–∏ 25-50–≥ —Å–∞—Ö–∞—Ä–∞ (–º–ª)
      'sugar_water_bonus_50_75':
          500, // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–æ–¥–∞ –ø—Ä–∏ 50-75–≥ —Å–∞—Ö–∞—Ä–∞ (–º–ª)
      'sugar_water_bonus_above_75':
          750, // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–æ–¥–∞ –ø—Ä–∏ >75–≥ —Å–∞—Ö–∞—Ä–∞ (–º–ª)
    };
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  T _getValue<T>(String key, T defaultValue) {
    if (!_initialized || _remoteConfig == null) {
      if (key == 'paywall_show_trial') {
        logger.d(
          'üß™ RC DEBUG: _getValue($key) -> not initialized (_initialized: $_initialized, _remoteConfig: ${_remoteConfig != null}), returning default: $defaultValue',
        );
      }
      return defaultValue;
    }

    try {
      if (T == String) {
        return _remoteConfig!.getString(key) as T;
      } else if (T == int) {
        return _remoteConfig!.getInt(key) as T;
      } else if (T == double) {
        return _remoteConfig!.getDouble(key) as T;
      } else if (T == bool) {
        final result = _remoteConfig!.getBool(key) as T;
        logger.d('üß™ RC DEBUG: _getValue($key) -> bool result: $result');
        return result;
      } else {
        logger.d(
          'üß™ RC DEBUG: _getValue($key) -> unsupported type ${T.toString()}, returning default: $defaultValue',
        );
        return defaultValue;
      }
    } catch (e) {
      logger.d(
        'üß™ RC DEBUG: _getValue($key) -> error: $e, returning default: $defaultValue',
      );
    }

    return defaultValue;
  }

  // üìä –ú–ï–¢–û–î–´ –î–õ–Ø HRI –°–ï–†–í–ò–°–ê

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è double –∑–Ω–∞—á–µ–Ω–∏–π
  double getDouble(String key) {
    final defaults = _getDefaults();
    final defaultValue = defaults[key] ?? 0.0;
    return _getValue<double>(
      key,
      defaultValue is double ? defaultValue : defaultValue.toDouble(),
    );
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è int –∑–Ω–∞—á–µ–Ω–∏–π
  int getInt(String key) {
    final defaults = _getDefaults();
    final defaultValue = defaults[key] ?? 0;
    return _getValue<int>(
      key,
      defaultValue is int ? defaultValue : defaultValue.toInt(),
    );
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è bool –∑–Ω–∞—á–µ–Ω–∏–π
  bool getBool(String key) {
    final defaults = _getDefaults();
    final defaultValue = defaults[key] ?? false;
    return _getValue<bool>(key, defaultValue is bool ? defaultValue : false);
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è String –∑–Ω–∞—á–µ–Ω–∏–π
  String getString(String key) {
    final defaults = _getDefaults();
    final defaultValue = defaults[key] ?? '';
    return _getValue<String>(key, defaultValue.toString());
  }

  // –í–µ—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ HRI (—Å—É–º–º–∞ = 100)
  double getHRIWaterWeight() => _getValue('hri_weight_water', 26.0);
  double getHRISodiumWeight() => _getValue('hri_weight_sodium', 12.0);
  double getHRIPotassiumWeight() => _getValue('hri_weight_potassium', 8.0);
  double getHRIMagnesiumWeight() => _getValue('hri_weight_magnesium', 8.0);
  double getHRIHeatWeight() => _getValue('hri_weight_heat', 10.0);
  double getHRIWorkoutWeight() => _getValue('hri_weight_workout', 12.0);
  double getHRICaffeineWeight() => _getValue('hri_weight_caffeine', 8.0);
  double getHRIAlcoholWeight() => _getValue('hri_weight_alcohol', 8.0);
  double getHRITimeWeight() => _getValue('hri_weight_time', 4.0);
  double getHRIMorningWeight() => _getValue('hri_weight_morning', 4.0);

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞ HRI
  double getCaffeineHalfLife() => _getValue('caffeine_half_life_hours', 6.0);
  double getCaffeineScaleFactor() => _getValue('caffeine_scale_factor', 2.0);
  double getAlcoholRiskHalfLife() =>
      _getValue('alcohol_risk_half_life_hours', 4.0);
  double getAlcoholHRIRiskPerSD() => _getValue('alc_hri_risk_per_sd', 5.0);
  double getAlcoholHRIRiskCap() => _getValue('alc_hri_risk_cap', 15.0);
  double getTimeSinceLastIntakeThreshold() =>
      _getValue('time_since_last_intake_threshold', 3.0);
  bool getFastingSuppressesTimeComponent() =>
      _getValue('fasting_suppresses_time_component', true);
  double getMorningWeightDropThreshold() =>
      _getValue('morning_weight_drop_threshold', 1.0);
  double getHeatIndexHysteresis() => _getValue('heat_index_hysteresis', 0.5);

  // –ü–æ—Ä–æ–≥–∏ Heat Index –¥–ª—è HRI
  double getHeatIndexLowThreshold() => _getValue('heat_index_low', 27.0);
  double getHeatIndexMediumThreshold() => _getValue('heat_index_medium', 32.0);
  double getHeatIndexHighThreshold() => _getValue('heat_index_high', 39.0);

  // üî• –§–û–†–ú–£–õ–´ –í–û–î–´
  double get waterMinPerKg => _getValue('water_min_per_kg', 22.0);
  double get waterOptPerKg => _getValue('water_opt_per_kg', 30.0);
  double get waterMaxPerKg => _getValue('water_max_per_kg', 36.0);

  // ‚ö° –≠–õ–ï–ö–¢–†–û–õ–ò–¢–´
  int get sodiumNormal => _getValue('sodium_normal', 2500);
  int get sodiumKeto => _getValue('sodium_keto', 3500);
  int get potassiumNormal => _getValue('potassium_normal', 3000);
  int get potassiumKeto => _getValue('potassium_keto', 3500);
  int get magnesiumNormal => _getValue('magnesium_normal', 350);
  int get magnesiumKeto => _getValue('magnesium_keto', 400);

  // üå°Ô∏è HEAT INDEX –ü–û–†–û–ì–ò
  double get heatIndexLow => _getValue('heat_index_low', 27.0);
  double get heatIndexMedium => _getValue('heat_index_medium', 32.0);
  double get heatIndexHigh => _getValue('heat_index_high', 39.0);

  double get heatWaterAdjustmentLow =>
      _getValue('heat_water_adjustment_low', 0.05);
  double get heatWaterAdjustmentMedium =>
      _getValue('heat_water_adjustment_medium', 0.08);
  double get heatWaterAdjustmentHigh =>
      _getValue('heat_water_adjustment_high', 0.12);

  int get heatSodiumAdjustmentLow =>
      _getValue('heat_sodium_adjustment_low', 500);
  int get heatSodiumAdjustmentMedium =>
      _getValue('heat_sodium_adjustment_medium', 1000);
  int get heatSodiumAdjustmentHigh =>
      _getValue('heat_sodium_adjustment_high', 1500);

  // üìä –ü–û–†–û–ì–ò –°–¢–ê–¢–£–°–û–í
  double get dehydrationThreshold =>
      _getValue('hydration_dehydration_threshold', 0.9);
  double get dilutionWaterThreshold =>
      _getValue('hydration_dilution_water_threshold', 1.15);
  double get dilutionSodiumThreshold =>
      _getValue('hydration_dilution_sodium_threshold', 0.6);
  double get lowSaltThreshold => _getValue('hydration_low_salt_threshold', 0.5);

  // üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
  int get maxFreeReminders => _getValue('max_free_reminders', 4);
  int get coffeeReminderDelayMinutes =>
      _getValue('coffee_reminder_delay_minutes', 45);
  int get reminderSpamProtectionHours =>
      _getValue('reminder_spam_protection_hours', 1);
  int get reminderDailyLimit => _getValue('reminder_daily_limit', 8);

  // ‚è∞ –¢–ò–•–ò–ï –ß–ê–°–´
  int get quietHoursStart => _getValue('quiet_hours_start', 22);
  int get quietHoursEnd => _getValue('quiet_hours_end', 7);

  // üçΩÔ∏è FASTING AWARE
  bool get fastingAwareEnabled => _getValue('fasting_aware_enabled', true);
  bool get fastingElectrolyteReminderEnabled =>
      _getValue('fasting_electrolyte_reminder_enabled', true);
  bool get fastingRefeedingLadderEnabled =>
      _getValue('fasting_refeeding_ladder_enabled', true);

  // üí∞ –ü–û–î–ü–ò–°–ö–ê –ò –¶–ï–ù–´
  bool get paywallShowTrial {
    try {
      // –ï—Å–ª–∏ Remote Config –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º default true
      if (!_initialized || _remoteConfig == null) {
        logger.d(
          'üß™ RC DEBUG: paywallShowTrial not initialized, returning true',
        );
        return true;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Remote Config
      final value = _remoteConfig!.getBool('paywall_show_trial');
      logger.d('üß™ RC DEBUG: paywallShowTrial remote value: $value');

      // –í production —Ö–æ—Ç–∏–º —á—Ç–æ–±—ã trial –±—ã–ª –≤–∫–ª—é—á–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç Remote Config
      // TODO: –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Remote Config –≤ Firebase –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —ç—Ç–æ –∏ –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ—Å—Ç–æ value
      return true;
    } catch (e) {
      logger.d('üß™ RC DEBUG: paywallShowTrial error: $e, returning true');
      return true;
    }
  }

  bool get trialEnabled => _getValue('trial_enabled', true);
  int get trialDurationDays => _getValue('trial_duration_days', 7);

  // Getters –¥–ª—è —Ü–µ–Ω (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–ª–∞–µ–º –≤ UI)
  double get priceAnnual => _getValue('price_annual', 9.99);
  double get priceAnnualOriginal => _getValue('price_annual_original', 16.99);
  int get priceAnnualDiscount => _getValue('price_annual_discount', 41);
  String get priceAnnualCurrency => _getValue('price_annual_currency', 'USD');
  String get priceAnnualPeriod => _getValue('price_annual_period', 'year');

  double get priceMonthly => _getValue('price_monthly', 1.99);
  String get priceMonthlyCurrency => _getValue('price_monthly_currency', 'USD');
  String get priceMonthlyPeriod => _getValue('price_monthly_period', 'month');

  double get priceLifetime => _getValue('price_lifetime', 24.99);
  String get priceLifetimeCurrency =>
      _getValue('price_lifetime_currency', 'USD');

  // –¢–µ–∫—Å—Ç—ã –ø–µ–π–≤–æ–ª–∞ (–±–∞–∑–æ–≤—ã–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
  String get paywallTitle => _getValue('paywall_title', 'HydraCoach PRO');
  String get paywallSubtitle =>
      _getValue('paywall_subtitle', 'Become a hydration hero!');
  String get paywallButtonText => _getValue('paywall_button_text', 'Continue');
  String get paywallTrialText =>
      _getValue('paywall_trial_text', 'Try 7 days free');
  String get paywallCancelText =>
      _getValue('paywall_cancel_text', 'Cancel anytime');
  String get paywallBestValueText =>
      _getValue('paywall_best_value_text', 'BEST VALUE');
  String get paywallLifetimeText =>
      _getValue('paywall_lifetime_text', 'Lifetime access');
  String get paywallLifetimeSubtitle =>
      _getValue('paywall_lifetime_subtitle', 'no recurring payments');

  // üîß –§–ò–ß –§–õ–ê–ì–ò
  bool get featureSmartReminders => _getValue('feature_smart_reminders', true);
  bool get featureWeeklyReports => _getValue('feature_weekly_reports', true);
  bool get featureCsvExport => _getValue('feature_csv_export', true);
  bool get featureCloudSync => _getValue('feature_cloud_sync', true);
  bool get featureContextualReminders =>
      _getValue('feature_contextual_reminders', true);
  bool get featureHeatProtocols => _getValue('feature_heat_protocols', true);

  // üìä SDK –ü–ê–ë–õ–ò–®–ï–†–ê
  bool get publisherSdkEnabled => _getValue('publisher_sdk_enabled', false);
  bool get appsflyerEnabled => _getValue('appsflyer_enabled', false);

  List<String> get sanctionedCountries {
    try {
      final jsonString = _getValue(
        'sanctioned_countries',
        '["RU", "BY", "CN", "IR", "KP"]',
      );
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ JSON
      // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
      return ['RU', 'BY', 'CN', 'IR', 'KP'];
    } catch (e) {
      return ['RU', 'BY', 'CN', 'IR', 'KP'];
    }
  }

  // üéØ A/B –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
  String get abPaywallVariant => _getValue('ab_paywall_variant', 'default');
  String get abOnboardingVariant =>
      _getValue('ab_onboarding_variant', 'standard');

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  Future<bool> forceRefresh() async {
    if (!_initialized || _remoteConfig == null) {
      return false;
    }

    try {
      await _remoteConfig!.fetchAndActivate();

      if (kDebugMode) {
        logger.i('üîÑ Remote Config –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ');
      }

      return true;
    } catch (e) {
      if (kDebugMode) {
        logger.e('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $e');
      }
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  Map<String, RemoteConfigValue> getAllParameters() {
    if (!_initialized || _remoteConfig == null) {
      return {};
    }

    return _remoteConfig!.getAll();
  }

  /// –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–æ–¥—ã –ø–æ Heat Index
  HeatAdjustments calculateHeatAdjustments(double heatIndex) {
    if (heatIndex < heatIndexLow) {
      return HeatAdjustments(0.0, 0); // –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
    } else if (heatIndex < heatIndexMedium) {
      return HeatAdjustments(heatWaterAdjustmentLow, heatSodiumAdjustmentLow);
    } else if (heatIndex < heatIndexHigh) {
      return HeatAdjustments(
        heatWaterAdjustmentMedium,
        heatSodiumAdjustmentMedium,
      );
    } else {
      return HeatAdjustments(heatWaterAdjustmentHigh, heatSodiumAdjustmentHigh);
    }
  }

  /// üîê –ü–æ–ª—É—á–∏—Ç—å OpenWeatherMap API –∫–ª—é—á
  /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Firebase Remote Config –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  String getOpenWeatherMapApiKey() {
    if (_remoteConfig == null) {
      // Fallback –µ—Å–ª–∏ Remote Config –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      logger.w(
        '‚ö†Ô∏è Remote Config –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback API –∫–ª—é—á',
      );
      return 'c460f153f615a343e0fe5158eae73121';
    }

    final apiKey = _remoteConfig!.getString('openweathermap_api_key');

    if (apiKey.isEmpty) {
      logger.w('‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Remote Config, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback');
      return 'c460f153f615a343e0fe5158eae73121';
    }

    // –í production –ù–ï –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–ª—é—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (kDebugMode) {
      logger.i('üîë –ó–∞–≥—Ä—É–∂–µ–Ω API –∫–ª—é—á: ${apiKey.substring(0, 8)}...');
    }

    return apiKey;
  }
}
