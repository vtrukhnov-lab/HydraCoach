import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:hydracoach/utils/app_logger.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

import 'devtodev_config.dart';

/// –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è DevToDev Subscription API
enum SubscriptionEventType {
  purchase('PURCHASE'),
  trialPurchase('TRIAL_PURCHASE'),
  trialCancellation('TRIAL_CANCELLATION'),
  renewal('RENEWAL'),
  cancellation('CANCELLATION'),
  refund('REFUND');

  const SubscriptionEventType(this.value);
  final String value;
}

/// –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ –Ω–∞—Ç–∏–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π DevToDev Analytics.
///
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç MethodChannel `devtodev_analytics`. –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å
/// –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ iOS –∏ Android-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö. –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
/// –≤—ã–∑–æ–≤—ã –Ω–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –æ—à–∏–±–∫–µ –∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ debug-—Ä–µ–∂–∏–º–µ.
class DevToDevAnalyticsService {
  DevToDevAnalyticsService._();

  static final DevToDevAnalyticsService _instance =
      DevToDevAnalyticsService._();

  factory DevToDevAnalyticsService() => _instance;

  static const MethodChannel _channel = MethodChannel('devtodev_analytics');

  bool _isInitialized = false;
  DevToDevCredentials _credentials = const DevToDevCredentials.empty();

  bool get isInitialized => _isInitialized;
  DevToDevCredentials get credentials => _credentials;

  Future<void> initialize() async {
    if (_isInitialized) {
      return;
    }

    _credentials = _resolveCredentials();

    if (!_credentials.isComplete) {
      if (kDebugMode) {
        logger.d(
          '‚ö†Ô∏è DevToDev –∫–ª—é—á–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã $defaultTargetPlatform. '
          '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è DevToDev –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞.',
        );
      }
      return;
    }

    try {
      await _channel.invokeMethod<void>('initialize', <String, dynamic>{
        'appId': _credentials.appId,
        'secretKey': _credentials.secretKey,
        'apiKey': _credentials.apiKey,
      });
      _isInitialized = true;
    } on MissingPluginException {
      // –í —Å–±–æ—Ä–∫–µ –±–µ–∑ –Ω–∞—Ç–∏–≤–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.
      if (kDebugMode) {
        logger.d(
          '‚ö†Ô∏è –ü–ª–∞–≥–∏–Ω DevToDev –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∞—Ç–∏–≤–Ω—É—é '
          '—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é MethodChannel devtodev_analytics.',
        );
      }
    } catch (error, stackTrace) {
      if (kDebugMode) {
        logger.d('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DevToDev: $error');
        logger.d(stackTrace);
      }
    }
  }

  Future<void> setUserId(String? userId) async {
    if (!_isInitialized) {
      return;
    }

    try {
      await _channel.invokeMethod<void>('setUserId', {'userId': userId});
    } catch (error) {
      _logError('setUserId', error);
    }
  }

  Future<void> clearUserId() async {
    if (!_isInitialized) {
      return;
    }

    try {
      await _channel.invokeMethod<void>('clearUserId');
    } catch (error) {
      _logError('clearUserId', error);
    }
  }

  Future<void> setUserProperty(String name, String value) async {
    if (!_isInitialized) {
      return;
    }

    try {
      await _channel.invokeMethod<void>('setUserProperty', {
        'name': name,
        'value': value,
      });
    } catch (error) {
      _logError('setUserProperty', error);
    }
  }

  Future<void> setTrackingEnabled(bool enabled) async {
    if (!_isInitialized) {
      return;
    }

    try {
      await _channel.invokeMethod<void>('setTrackingEnabled', {
        'enabled': enabled,
      });
    } catch (error) {
      _logError('setTrackingEnabled', error);
    }
  }

  Future<void> logScreenView({
    required String screenName,
    String? screenClass,
  }) async {
    if (!_isInitialized) {
      return;
    }

    try {
      await _channel.invokeMethod<void>('logScreenView', {
        'screenName': screenName,
        'screenClass': screenClass,
      });
    } catch (error) {
      _logError('logScreenView', error);
    }
  }

  Future<void> logEvent({
    required String name,
    Map<String, dynamic>? parameters,
  }) async {
    if (!_isInitialized) {
      return;
    }

    try {
      await _channel.invokeMethod<void>('logEvent', {
        'name': name,
        'parameters': parameters ?? <String, dynamic>{},
      });
    } catch (error) {
      _logError('logEvent', error);
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ —Ä–µ–∞–ª—å–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ (–ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–∫—É–ø–∫–∞)
  Future<void> realCurrencyPayment({
    required String orderId,
    required double price,
    required String productId,
    required String currencyCode,
  }) async {
    if (!_isInitialized) {
      return;
    }

    try {
      await _channel.invokeMethod<void>('realCurrencyPayment', {
        'orderId': orderId,
        'price': price,
        'productId': productId,
        'currencyCode': currencyCode,
      });
    } catch (error) {
      _logError('realCurrencyPayment', error);
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
  Future<void> subscriptionPayment({
    required String orderId,
    required double price,
    required String productId,
    required String currencyCode,
  }) async {
    if (!_isInitialized) {
      return;
    }

    try {
      await _channel.invokeMethod<void>('subscriptionPayment', {
        'orderId': orderId,
        'price': price,
        'productId': productId,
        'currencyCode': currencyCode,
      });
    } catch (error) {
      _logError('subscriptionPayment', error);
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞/–æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  Future<void> tutorial(int step) async {
    if (!_isInitialized) {
      return;
    }

    try {
      await _channel.invokeMethod<void>('tutorial', {'step': step});
    } catch (error) {
      _logError('tutorial', error);
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> levelUp({
    required int level,
    Map<String, double>? balances,
  }) async {
    if (!_isInitialized) {
      return;
    }

    try {
      await _channel.invokeMethod<void>('levelUp', {
        'level': level,
        'balances': balances,
      });
    } catch (error) {
      _logError('levelUp', error);
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> currentBalance(Map<String, double> balance) async {
    if (!_isInitialized) {
      return;
    }

    try {
      await _channel.invokeMethod<void>('currentBalance', {'balance': balance});
    } catch (error) {
      _logError('currentBalance', error);
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ ad impression (—Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ–∫–∞–∑ —Å –¥–æ—Ö–æ–¥–æ–º)
  ///
  /// –í–ê–ñ–ù–û: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ S2S –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
  /// —Å ad networks (AppLovin MAX, ironSource, Fyber), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
  ///
  /// [network] - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π —Å–µ—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "AppLovin", "AdMob")
  /// [revenue] - –¥–æ—Ö–æ–¥ –∑–∞ –ø–æ–∫–∞–∑ –≤ USD
  /// [placement] - –º–µ—Å—Ç–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "MainScreen", "RewardedVideo")
  /// [unit] - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–ª–æ–∫–∞ (ad unit ID)
  Future<void> adImpression({
    required String network,
    required double revenue,
    required String placement,
    required String unit,
  }) async {
    if (!_isInitialized) {
      return;
    }

    try {
      await _channel.invokeMethod<void>('adImpression', {
        'network': network,
        'revenue': revenue,
        'placement': placement,
        'unit': unit,
      });

      if (kDebugMode) {
        logger.d(
          'üì∫ DevToDev Ad Impression: $network, \$$revenue, $placement, $unit',
        );
      }
    } catch (error) {
      _logError('adImpression', error);
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å DevToDev ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ SDK
  Future<String?> getDevToDevId() async {
    if (!_isInitialized) {
      return null;
    }

    try {
      final result = await _channel.invokeMethod<String>('getDevToDevId');
      return result;
    } catch (error) {
      _logError('getDevToDevId', error);
      return null;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Server API
  /// https://docs.devtodev.com/integration/server-api/subscription-api
  Future<void> sendSubscriptionEvent({
    required SubscriptionEventType eventType,
    required String transactionId,
    required String originalTransactionId,
    required int startDateMs,
    required int expiresDateMs,
    required String productId,
    required double price,
    required String currency,
    required bool isTrial,
  }) async {
    if (!_isInitialized || !_credentials.isComplete) {
      if (kDebugMode) {
        logger.d('‚ö†Ô∏è DevToDev –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∫–ª—é—á–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
      }
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º DevToDev ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final devtodevId = await getDevToDevId();
      if (devtodevId == null) {
        if (kDebugMode) {
          logger.w(
            '‚ö†Ô∏è DevToDev ID –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏',
          );
        }
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å API –∫–ª—é—á–æ–º
      final url = Uri.parse(
        'https://statgw.devtodev.com/subscriptions/api?apikey=${_credentials.apiKey}',
      );

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
      final body = {
        'notificationType': eventType.value,
        'transactionId': transactionId,
        'originalTransactionId': originalTransactionId,
        'startDateMs': startDateMs,
        'expiresDateMs': expiresDateMs,
        'product': productId,
        'price': price,
        'currency': currency,
        'isTrial': isTrial,
        'devtodevId': int.tryParse(devtodevId) ?? 0,
      };

      if (kDebugMode) {
        logger.i('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ DevToDev:');
        logger.i('   Type: ${eventType.value}');
        logger.i('   Product: $productId');
        logger.i('   Price: $price $currency');
        logger.i('   Trial: $isTrial');
        logger.i('   DevToDev ID: $devtodevId');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
      final response = await http.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: json.encode(body),
      );

      if (response.statusCode == 200) {
        if (kDebugMode) {
          logger.i('‚úÖ –°–æ–±—ã—Ç–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ DevToDev');
        }
      } else {
        if (kDebugMode) {
          logger.e(
            '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: ${response.statusCode} - ${response.body}',
          );
        }
      }
    } catch (error, stackTrace) {
      if (kDebugMode) {
        logger.e('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ DevToDev: $error');
        logger.d(stackTrace);
      }
    }
  }

  DevToDevCredentials _resolveCredentials() {
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return devToDevAndroidCredentials;
      case TargetPlatform.iOS:
        return devToDevIosCredentials;
      default:
        return const DevToDevCredentials.empty();
    }
  }

  void _logError(String method, Object error) {
    if (kDebugMode) {
      logger.d('‚ùå DevToDev $method error: $error');
    }
  }
}
