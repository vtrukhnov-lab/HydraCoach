// lib/services/notification_service.dart
// –†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –§–∞—Å–∞–¥-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_remote_config/firebase_remote_config.dart';
import 'package:timezone/timezone.dart' as tz;

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
import 'notifications/notification_types.dart';
import 'notifications/notification_initializer.dart';
import 'notifications/notification_scheduler.dart';
import 'notifications/notification_sender.dart';
import 'notifications/specific_notifications.dart';
import 'notifications/fcm_handler.dart';
import 'notifications/notification_manager.dart';
import 'notifications/helpers/notification_limits_helper.dart';
import 'notifications/helpers/timezone_helper.dart';
import 'notification_texts.dart';

// –°—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
import 'analytics_service.dart';

/// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞—Å–∞–¥ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π HydraCoach
/// –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π API
class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
  final FlutterLocalNotificationsPlugin _localNotifications = FlutterLocalNotificationsPlugin();
  final FirebaseMessaging _messaging = FirebaseMessaging.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseRemoteConfig _remoteConfig = FirebaseRemoteConfig.instance;
  final AnalyticsService _analytics = AnalyticsService();

  // –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
  late final NotificationLimitsHelper _limitsHelper;
  late final NotificationInitializer _initializer;
  late final NotificationSender _sender;
  late final NotificationScheduler _scheduler;
  late final SpecificNotifications _specificNotifications;
  late final FCMHandler _fcmHandler;
  late final NotificationManager _manager;

  bool _isInitialized = false;

  // ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

  /// –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
  static Future<void> initialize() async {
    final service = NotificationService();
    await service._initializeService();
  }

  Future<void> _initializeService() async {
    if (_isInitialized) {
      print('NotificationService already initialized, skipping');
      return;
    }

    print('üî• [NotificationService] Starting initialization...');

    try {
      // 1. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      await _createComponents();

      // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      await _initializer.initialize();

      // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FCM
      await _fcmHandler.initialize();

      // 4. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      final state = await _initializer.restoreNotificationState();
      _sender.updatePendingIds(state['pendingIds']);

      _isInitialized = true;
      print('‚úÖ [NotificationService] Core initialization complete');

      // 5. –ö–†–ò–¢–ò–ß–ù–û: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      print('üî• [NotificationService] Starting notification scheduling...');
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      await Future.delayed(Duration(milliseconds: 300));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ü–ï–†–ï–î –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      await _checkExistingNotifications();
      
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      final schedulingSuccess = await _scheduleNotificationsWithVerification();
      
      if (!schedulingSuccess) {
        print('‚ö†Ô∏è [NotificationService] First scheduling attempt failed, retrying...');
        await Future.delayed(Duration(seconds: 1));
        await _forceScheduleNotifications();
      }
      
      print('‚úÖ [NotificationService] Full initialization complete');
      
    } catch (e, stackTrace) {
      print('‚ùå [NotificationService] Critical error during initialization: $e');
      print('Stack trace: $stackTrace');
      _isInitialized = false;
      rethrow;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> _checkExistingNotifications() async {
    final pending = await _localNotifications.pendingNotificationRequests();
    final now = DateTime.now();
    final todayDay = TimezoneHelper.dayOfYear(now);
    
    print('üìã [NotificationService] Checking existing notifications...');
    print('  Total pending: ${pending.length}');
    
    Map<int, int> byDay = {};
    for (final n in pending) {
      try {
        final decoded = NotificationSender.decodeNotificationId(n.id);
        byDay[decoded.dayFromId] = (byDay[decoded.dayFromId] ?? 0) + 1;
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö ID
      }
    }
    
    print('  By day distribution:');
    byDay.forEach((day, count) {
      final label = day == todayDay ? ' (TODAY)' : day == todayDay + 1 ? ' (TOMORROW)' : '';
      print('    Day $day: $count notifications$label');
    });
  }

  /// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  Future<bool> _scheduleNotificationsWithVerification() async {
    print('üîÑ [NotificationService] Scheduling notifications...');
    
    // –í—ã–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    await _scheduler.scheduleInitialNotifications();
    
    // –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await Future.delayed(Duration(milliseconds: 200));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    final pending = await _localNotifications.pendingNotificationRequests();
    final now = DateTime.now();
    final todayDay = TimezoneHelper.dayOfYear(now);
    
    int todayCount = 0;
    int tomorrowCount = 0;
    
    for (final n in pending) {
      try {
        final decoded = NotificationSender.decodeNotificationId(n.id);
        if (decoded.dayFromId == todayDay) {
          todayCount++;
        } else if (decoded.dayFromId == todayDay + 1) {
          tomorrowCount++;
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ID
      }
    }
    
    print('üìä [NotificationService] Scheduling result:');
    print('  Today (day $todayDay): $todayCount notifications');
    print('  Tomorrow: $tomorrowCount notifications');
    print('  Total: ${pending.length} notifications');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –µ—Å–ª–∏ –µ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    return todayCount > 0 || now.hour >= 21; // –ü–æ—Å–ª–µ 21:00 –Ω–æ—Ä–º–∞–ª—å–Ω–æ –Ω–µ –∏–º–µ—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> _forceScheduleNotifications() async {
    print('üö® [NotificationService] FORCE SCHEDULING ACTIVATED');
    
    final now = DateTime.now();
    
    // –ï—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–∑–¥–Ω–æ, —Å–æ–∑–¥–∞—ë–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (now.hour < 21) {
      print('  Creating emergency notifications for today...');
      
      // –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      final todayDay = TimezoneHelper.dayOfYear(now);
      final pending = await _localNotifications.pendingNotificationRequests();
      
      for (final n in pending) {
        try {
          final decoded = NotificationSender.decodeNotificationId(n.id);
          if (decoded.dayFromId == todayDay) {
            await _localNotifications.cancel(n.id);
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
      }
      
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤
      await _createEmergencyNotifications();
    }
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –±—É–¥—É—â–∏–µ –¥–Ω–∏
    await _scheduler.scheduleFutureDaysOnly();
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é
  Future<void> _createEmergencyNotifications() async {
    final now = DateTime.now();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—ã
    await NotificationTexts.ensureLoaded();
    
    // –í—Ä–µ–º–µ–Ω–∞ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    final times = [
      now.add(Duration(minutes: 5)),    // –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
      now.add(Duration(minutes: 60)),   // –ß–µ—Ä–µ–∑ —á–∞—Å
      now.add(Duration(minutes: 120)),  // –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞
    ];
    
    int created = 0;
    for (final time in times) {
      if (time.hour >= 21) continue; // –ù–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å–ª–µ 21:00
      
      try {
        final notificationId = _sender.generateNotificationId(
          NotificationType.waterReminder,
          when: time
        );
        
        // –°–æ–∑–¥–∞—ë–º –¥–µ—Ç–∞–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        final androidDetails = AndroidNotificationDetails(
          'hydracoach_default_${NotificationTexts.currentLocale}',
          NotificationTexts.channelNameDefault,
          channelDescription: NotificationTexts.channelDescDefault,
          importance: Importance.high,
          priority: Priority.high,
          enableVibration: true,
          playSound: true,
        );
        
        final iosDetails = DarwinNotificationDetails(
          presentAlert: true,
          presentBadge: true,
          presentSound: true,
        );
        
        final details = NotificationDetails(
          android: androidDetails,
          iOS: iosDetails,
        );
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å inexact scheduling –¥–ª—è Google Play Store compliance
        await _localNotifications.zonedSchedule(
          notificationId,
          NotificationTexts.waterReminderTitle,
          NotificationTexts.notificationMorningWaterBody,
          tz.TZDateTime.from(time, tz.local),
          details,
          androidScheduleMode: AndroidScheduleMode.inexactAllowWhileIdle,
        );
        
        created++;
        print('  ‚úÖ Emergency notification scheduled for ${time.hour}:${time.minute.toString().padLeft(2, '0')}');
        
      } catch (e) {
        print('  ‚ùå Failed to create emergency notification: $e');
      }
    }
    
    print('  Created $created emergency notifications');
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
  Future<void> _createComponents() async {
    print('üîß [NotificationService] Creating components...');

    // –°–æ–∑–¥–∞–Ω–∏–µ helpers
    _limitsHelper = NotificationLimitsHelper(_remoteConfig);

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    _initializer = NotificationInitializer(
      _localNotifications,
      _messaging,
      _remoteConfig,
    );

    _sender = NotificationSender(
      _localNotifications,
      _firestore,
      _limitsHelper,
      _analytics,
    );

    _scheduler = NotificationScheduler(
      _sender,
      _limitsHelper,
      _remoteConfig,
    );

    _specificNotifications = SpecificNotifications(
      _sender,
      _limitsHelper,
      _remoteConfig,
    );

    _fcmHandler = FCMHandler(
      _messaging,
      _firestore,
      _sender,
      _analytics,
    );

    _manager = NotificationManager(
      _localNotifications,
      _sender,
      _analytics,
    );

    print('‚úÖ [NotificationService] All components created');
  }

  // ==================== –ü–£–ë–õ–ò–ß–ù–û–ï API - –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ ====================

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
  Future<void> sendNotification({
    required NotificationType type,
    required String title,
    required String body,
    DateTime? scheduledTime,
    Map<String, dynamic>? payload,
    bool skipChecks = false,
    bool silentIfQuiet = false,
  }) async {
    await _ensureInitialized();
    
    await _sender.sendNotification(
      type: type,
      title: title,
      body: body,
      scheduledTime: scheduledTime,
      payload: payload,
      skipChecks: skipChecks,
      silentIfQuiet: silentIfQuiet,
    );
  }

  // ==================== –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================

  /// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ—Ñ–µ
  Future<void> schedulePostCoffeeReminder() async {
    await _ensureInitialized();
    await _specificNotifications.schedulePostCoffeeReminder();
  }

  /// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—è
  Future<void> scheduleAlcoholCounterReminder(int standardDrinks) async {
    await _ensureInitialized();
    await _specificNotifications.scheduleAlcoholCounterReminder(standardDrinks);
  }

  /// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—è (PRO)
  Future<void> scheduleAlcoholRecoveryPlan(int standardDrinks) async {
    await _ensureInitialized();
    await _specificNotifications.scheduleAlcoholRecoveryPlan(standardDrinks);
  }

  /// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —á–µ–∫-–∏–Ω–∞
  Future<void> scheduleMorningCheckIn() async {
    await _ensureInitialized();
    await _specificNotifications.scheduleMorningCheckIn();
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∂–∞—Ä–µ (PRO)
  Future<void> sendHeatWarning(double heatIndex) async {
    await _ensureInitialized();
    await _specificNotifications.sendHeatWarning(heatIndex);
  }

  /// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (PRO)
  Future<void> sendWorkoutReminder({DateTime? workoutEndTime}) async {
    await _ensureInitialized();
    await _specificNotifications.sendWorkoutReminder(workoutEndTime: workoutEndTime);
  }

  /// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞
  Future<void> scheduleEveningReport() async {
    await _ensureInitialized();
    await _specificNotifications.scheduleEveningReport();
  }

  // ==================== –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï ====================

  /// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (PRO)
  Future<void> scheduleSmartReminders() async {
    await _ensureInitialized();
    await _scheduler.scheduleSmartReminders();
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> rescheduleAllNotifications() async {
    await _ensureInitialized();
    
    print('üîÑ [NotificationService] Rescheduling all notifications...');
    
    // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ
    await _manager.cancelAllNotifications();
    
    // –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ
    await Future.delayed(Duration(milliseconds: 200));
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    final success = await _scheduleNotificationsWithVerification();
    
    if (!success) {
      await _forceScheduleNotifications();
    }
    
    print('‚úÖ [NotificationService] Rescheduling complete');
  }

  // ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ó–†–ï–®–ï–ù–ò–Ø–ú–ò ====================

  /// –Ø–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É
  Future<void> requestPermissions({bool exactAlarms = false}) async {
    await _ensureInitialized();
    
    print('üîê [NotificationService] Requesting notification permissions...');
    
    try {
      // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –∏–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
      await _initializer.requestSystemNotificationPermissions(
        requestExactAlarms: exactAlarms,
      );
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await _analytics.logEvent(
        name: 'notification_permission_request',
        parameters: {'exact_alarms': exactAlarms},
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
      final status = await _initializer.checkPermissionStatus();
      print('‚úÖ [NotificationService] Permission status: $status');
      
      // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã, –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (status['notifications'] == true) {
        print('üìÖ [NotificationService] Permissions granted, scheduling notifications...');
        await rescheduleAllNotifications();
      }
      
    } catch (e) {
      print('‚ùå [NotificationService] Error requesting permissions: $e');
      await _analytics.logNotificationError(
        type: 'permission_request',
        error: e.toString(),
      );
      rethrow;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
  Future<Map<String, bool>> checkPermissionStatus() async {
    await _ensureInitialized();
    return await _initializer.checkPermissionStatus();
  }
  
  // ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò ====================

  /// –û—Ç–º–µ–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> cancelNotification(int id) async {
    await _ensureInitialized();
    await _manager.cancelNotification(id);
  }

  /// –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> cancelAllNotifications() async {
    await _ensureInitialized();
    await _manager.cancelAllNotifications();
  }

  /// –û—Ç–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º
  Future<void> cancelByTypes(Set<NotificationType> types) async {
    await _ensureInitialized();
    await _manager.cancelByTypes(types);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    await _ensureInitialized();
    return await _manager.getPendingNotifications();
  }

  /// –í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> printNotificationStatus() async {
    await _ensureInitialized();
    await _manager.printNotificationStatus();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<Map<String, dynamic>> getNotificationStats() async {
    await _ensureInitialized();
    return await _manager.getNotificationStats();
  }

  // ==================== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ====================

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> sendTestNotification() async {
    await _ensureInitialized();
    await _manager.sendTestNotification();
  }

  /// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
  Future<void> scheduleTestIn1Minute() async {
    await _ensureInitialized();
    await _manager.scheduleTestIn1Minute();
  }

  // ==================== –°–ú–ï–ù–ê –Ø–ó–´–ö–ê ====================

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  /// –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç Android –∫–∞–Ω–∞–ª—ã –∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
  Future<void> onLocaleChanged(String localeCode) async {
    print('üåç [NotificationService] Language change initiated: $localeCode');
    
    try {
      await _ensureInitialized();

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
      await _initializer.recreateChannelsForLocale(localeCode);

      // –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
      await _scheduler.onLocaleChanged(localeCode);

      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await _analytics.logSettingsChanged(
        setting: 'notification_locale',
        value: localeCode,
      );

      print('‚úÖ [NotificationService] Language change completed');

    } catch (e, stackTrace) {
      print('‚ùå Error changing notification locale: $e');
      print('Stack trace: $stackTrace');
      
      await _analytics.logNotificationError(
        type: 'locale_change',
        error: e.toString(),
      );
    }
  }

  // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

  /// –ì–∞—Ä–∞–Ω—Ç–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º –º–µ—Ç–æ–¥–æ–≤
  Future<void> _ensureInitialized() async {
    if (!_isInitialized) {
      await _initializeService();
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool get isInitialized => _isInitialized;

  // ==================== –î–û–°–¢–£–ü –ö –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú (–¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è) ====================

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  NotificationSender get sender {
    if (!_isInitialized) throw StateError('NotificationService not initialized');
    return _sender;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  NotificationScheduler get scheduler {
    if (!_isInitialized) throw StateError('NotificationService not initialized');
    return _scheduler;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  NotificationManager get manager {
    if (!_isInitialized) throw StateError('NotificationService not initialized');
    return _manager;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ FCM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  FCMHandler get fcmHandler {
    if (!_isInitialized) throw StateError('NotificationService not initialized');
    return _fcmHandler;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  SpecificNotifications get specificNotifications {
    if (!_isInitialized) throw StateError('NotificationService not initialized');
    return _specificNotifications;
  }

  // ==================== –û–¢–õ–ê–î–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ====================

  /// –ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<Map<String, dynamic>> getSystemStatus() async {
    await _ensureInitialized();

    return {
      'initialized': _isInitialized,
      'notifications': await _manager.getNotificationStats(),
      'scheduler': await _scheduler.getSchedulerStatus(),
      'fcm': await _fcmHandler.getPermissionStatus(),
      'limits': await _limitsHelper.isProUser(),
      'settings': await _initializer.getUserNotificationSettings(),
    };
  }

  /// –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  Future<String> exportDebugInfo() async {
    await _ensureInitialized();
    
    final systemStatus = await getSystemStatus();
    final notificationsList = await _manager.exportNotificationsToJson();
    
    return '''
=== HydraCoach Notification System Debug ===
Time: ${DateTime.now().toIso8601String()}

System Status:
${systemStatus.toString()}

Notifications Export:
$notificationsList
    ''';
  }

  /// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å–±—Ä–æ—Å–∞ –∏–ª–∏ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  Future<void> cleanup() async {
    if (!_isInitialized) return;

    print('üßπ [NotificationService] Cleaning up...');
    
    try {
      // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await _manager.cancelAllNotifications();
      
      // –û—á–∏—â–∞–µ–º FCM
      await _fcmHandler.cleanup();
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      _isInitialized = false;
      
      print('‚úÖ [NotificationService] Cleanup completed');
    } catch (e) {
      print('‚ùå Error during cleanup: $e');
    }
  }
}