#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ HydraCoach –≤ –¢–†–ï–• –º–µ—Å—Ç–∞—Ö

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python scripts/bump_version.py patch      # 2.1.4 -> 2.1.5
  python scripts/bump_version.py minor      # 2.1.4 -> 2.2.0
  python scripts/bump_version.py major      # 2.1.4 -> 3.0.0
  python scripts/bump_version.py 2.1.5      # –Ø–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é
  python scripts/bump_version.py --validate # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏

–û–±–Ω–æ–≤–ª—è–µ—Ç:
  1. pubspec.yaml - version: X.X.X+YY
  2. android/app/build.gradle.kts - versionCode/versionName
  3. lib/main.dart - app_version –≤ analytics
"""
import re
import sys
from pathlib import Path
from typing import Tuple


class Colors:
    """ANSI color codes –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'


class VersionBumper:
    def __init__(self, root_dir: str = '.'):
        self.root = Path(root_dir)
        self.pubspec = self.root / "pubspec.yaml"
        self.gradle = self.root / "android" / "app" / "build.gradle.kts"
        self.main_dart = self.root / "lib" / "main.dart"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        if not self.pubspec.exists():
            raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {self.pubspec}")
        if not self.gradle.exists():
            raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {self.gradle}")
        if not self.main_dart.exists():
            raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {self.main_dart}")

    def get_current_version(self) -> Tuple[str, int]:
        """–ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ pubspec.yaml"""
        content = self.pubspec.read_text(encoding='utf-8')
        match = re.search(r'version:\s*(\d+\.\d+\.\d+)\+(\d+)', content)
        if not match:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –≤ pubspec.yaml (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: version: X.Y.Z+BUILD)")
        return match.group(1), int(match.group(2))

    def bump_version(self, bump_type: str) -> Tuple[str, int]:
        """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –≤–µ—Ä—Å–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ semantic versioning"""
        version, build = self.get_current_version()
        major, minor, patch = map(int, version.split('.'))

        if bump_type == 'major':
            major += 1
            minor = 0
            patch = 0
        elif bump_type == 'minor':
            minor += 1
            patch = 0
        elif bump_type == 'patch':
            patch += 1
        else:
            # –Ø–≤–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –≤–µ—Ä—Å–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä "2.1.5")
            try:
                parts = bump_type.split('.')
                if len(parts) != 3:
                    raise ValueError()
                major, minor, patch = map(int, parts)
            except (ValueError, AttributeError):
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: {bump_type}. –û–∂–∏–¥–∞–µ—Ç—Å—è X.Y.Z –∏–ª–∏ patch/minor/major")

        new_version = f"{major}.{minor}.{patch}"
        new_build = build + 1
        return new_version, new_build

    def update_pubspec(self, version: str, build: int) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç pubspec.yaml"""
        content = self.pubspec.read_text(encoding='utf-8')
        old_version_line = re.search(r'version:.*', content).group(0)

        new_content = re.sub(
            r'version:\s*\d+\.\d+\.\d+\+\d+',
            f'version: {version}+{build}',
            content
        )

        if content == new_content:
            print(f"{Colors.YELLOW}‚ö†Ô∏è  pubspec.yaml –Ω–µ –∏–∑–º–µ–Ω–µ–Ω{Colors.END}")
            return

        self.pubspec.write_text(new_content, encoding='utf-8')
        print(f"{Colors.GREEN}‚úÖ pubspec.yaml:{Colors.END} version: {version}+{build}")

    def update_gradle(self, version: str, build: int) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç android/app/build.gradle.kts"""
        content = self.gradle.read_text(encoding='utf-8')

        # –û–±–Ω–æ–≤–ª—è–µ–º versionCode
        content = re.sub(
            r'versionCode\s*=\s*\d+',
            f'versionCode = {build}',
            content
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º versionName
        content = re.sub(
            r'versionName\s*=\s*"[\d.]+"',
            f'versionName = "{version}"',
            content
        )

        self.gradle.write_text(content, encoding='utf-8')
        print(f"{Colors.GREEN}‚úÖ build.gradle.kts:{Colors.END} versionCode={build}, versionName=\"{version}\"")

    def update_main_dart(self, version: str) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç lib/main.dart (app_version –≤ analytics)"""
        content = self.main_dart.read_text(encoding='utf-8')

        # –ò—â–µ–º 'app_version': 'X.X.X',
        content = re.sub(
            r"'app_version':\s*'[\d.]+'",
            f"'app_version': '{version}'",
            content
        )

        self.main_dart.write_text(content, encoding='utf-8')
        print(f"{Colors.GREEN}‚úÖ lib/main.dart:{Colors.END} app_version: '{version}'")

    def validate_sync(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤–µ—Ä—Å–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö"""
        print(f"\n{Colors.BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π...{Colors.END}\n")

        # 1. –ß–∏—Ç–∞–µ–º pubspec.yaml
        pubspec_content = self.pubspec.read_text(encoding='utf-8')
        pubspec_match = re.search(r'version:\s*(\d+\.\d+\.\d+)\+(\d+)', pubspec_content)
        if not pubspec_match:
            print(f"{Colors.RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –≤ pubspec.yaml{Colors.END}")
            return False
        pubspec_ver = pubspec_match.group(1)
        pubspec_build = int(pubspec_match.group(2))

        # 2. –ß–∏—Ç–∞–µ–º build.gradle.kts
        gradle_content = self.gradle.read_text(encoding='utf-8')
        gradle_ver_match = re.search(r'versionName\s*=\s*"([\d.]+)"', gradle_content)
        gradle_build_match = re.search(r'versionCode\s*=\s*(\d+)', gradle_content)

        if not gradle_ver_match or not gradle_build_match:
            print(f"{Colors.RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –≤ build.gradle.kts{Colors.END}")
            return False

        gradle_ver = gradle_ver_match.group(1)
        gradle_build = int(gradle_build_match.group(1))

        # 3. –ß–∏—Ç–∞–µ–º main.dart
        main_content = self.main_dart.read_text(encoding='utf-8')
        main_ver_match = re.search(r"'app_version':\s*'([\d.]+)'", main_content)

        if not main_ver_match:
            print(f"{Colors.RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ app_version –≤ lib/main.dart{Colors.END}")
            return False

        main_ver = main_ver_match.group(1)

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        errors = []

        print(f"üìÑ pubspec.yaml:        {pubspec_ver}+{pubspec_build}")
        print(f"ü§ñ build.gradle.kts:   {gradle_ver} (build {gradle_build})")
        print(f"üéØ lib/main.dart:       {main_ver}")
        print()

        if pubspec_ver != gradle_ver:
            errors.append(f"–í–µ—Ä—Å–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: pubspec ({pubspec_ver}) != gradle ({gradle_ver})")

        if pubspec_ver != main_ver:
            errors.append(f"–í–µ—Ä—Å–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: pubspec ({pubspec_ver}) != main.dart ({main_ver})")

        if pubspec_build != gradle_build:
            errors.append(f"Build number –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: pubspec ({pubspec_build}) != gradle ({gradle_build})")

        if errors:
            for error in errors:
                print(f"{Colors.RED}‚ùå {error}{Colors.END}")
            return False

        print(f"{Colors.GREEN}‚úÖ –í—Å–µ –≤–µ—Ä—Å–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {pubspec_ver}+{pubspec_build}{Colors.END}")
        return True


def main():
    if len(sys.argv) < 2:
        print(__doc__)
        sys.exit(1)

    try:
        bumper = VersionBumper()

        # –†–µ–∂–∏–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if sys.argv[1] == '--validate':
            success = bumper.validate_sync()
            sys.exit(0 if success else 1)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
        old_version, old_build = bumper.get_current_version()

        print(f"\n{Colors.BOLD}üì¶ HydraCoach Version Bumper{Colors.END}")
        print(f"{Colors.BLUE}‚ïê{'‚ïê' * 50}{Colors.END}\n")
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {Colors.YELLOW}{old_version}+{old_build}{Colors.END}")

        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        bump_type = sys.argv[1]
        new_version, new_build = bumper.bump_version(bump_type)

        print(f"–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:   {Colors.GREEN}{Colors.BOLD}{new_version}+{new_build}{Colors.END}\n")
        print(f"{Colors.BLUE}‚ïê{'‚ïê' * 50}{Colors.END}\n")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        bumper.update_pubspec(new_version, new_build)
        bumper.update_gradle(new_version, new_build)
        bumper.update_main_dart(new_version)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        print(f"\n{Colors.BLUE}‚ïê{'‚ïê' * 50}{Colors.END}")
        if bumper.validate_sync():
            print(f"\n{Colors.GREEN}{Colors.BOLD}üéâ –í–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_version}+{new_build}!{Colors.END}")
            print(f"\n{Colors.YELLOW}üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:{Colors.END}")
            print(f"   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git diff")
            print(f"   2. –ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ: git commit -am \"chore: Bump version to {new_version}\"")
            print(f"   3. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ–≥: git tag v{new_version}")
            sys.exit(0)
        else:
            print(f"\n{Colors.RED}‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤—Ä—É—á–Ω—É—é.{Colors.END}")
            sys.exit(1)

    except Exception as e:
        print(f"\n{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.END}")
        sys.exit(1)


if __name__ == '__main__':
    main()
